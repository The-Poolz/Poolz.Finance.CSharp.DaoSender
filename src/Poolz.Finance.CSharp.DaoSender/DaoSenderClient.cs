// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace Poolz.Finance.CSharp.DaoSender
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public bool RequiresParameters { get; set; }
        public global::System.Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, global::System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(global::System.Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, global::System.Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(global::System.Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, global::System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static global::System.Type GetElementType(global::System.Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, global::System.Type targetType, global::System.Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(global::System.Type targetContainerType, global::System.Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
        private static readonly Regex RegexEscapeGraphQlString = new Regex(@"[\\\""/\b\f\n\r\t]", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string EscapeGraphQlStringValue(string value)
        {
            return RegexEscapeGraphQlString.Replace(value, m => @$"\{GetEscapeSequence(m.Value)}");
        }
    
        private static string GetEscapeSequence(string input)
        {
            switch (input)
            {
                case "\\":
                    return "\\";
                case "\"":
                    return "\"";
                case "/":
                    return "/";
                case "\b":
                    return "b";
                case "\f":
                    return "f";
                case "\n":
                    return "n";
                case "\r":
                    return "r";
                case "\t":
                    return "t";
                default:
                    throw new InvalidOperationException($"invalid character: {input}");
            }
        }
    
        public static string BuildArgumentValue(object value, string formatMask, GraphQlBuilderOptions options, int level)
        {
            var serializer = options.ArgumentBuilder ?? DefaultGraphQlArgumentBuilder.Instance;
            if (serializer.TryBuild(new GraphQlArgumentBuilderContext { Value = value, FormatMask = formatMask, Options = options, Level = level }, out var serializedValue))
                return serializedValue;
    
            if (value is null)
                return "null";
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? $"\"{EscapeGraphQlStringValue(formattable.ToString(formatMask, CultureInfo.InvariantCulture))}\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return $"\"{dateTime.ToString("O")}\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return $"\"{dateTimeOffset.ToString("O")}\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, options, level + 2);
    
            if (value is Guid)
                return $"\"{value}\"";
    
            if (value is String @string)
                return $"\"{EscapeGraphQlStringValue(@string)}\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, options, level, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = EscapeGraphQlStringValue(Convert.ToString(value, CultureInfo.InvariantCulture));
            return $"\"{argumentValue}\"";
        }
    
        public static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, GraphQlBuilderOptions options, int level, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (options.Formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, options.IndentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, options, level));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, GraphQlBuilderOptions options, int level)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? $"${queryBuilderParameter.Name}"
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, options, level);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, options.IndentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, GraphQlBuilderOptions options, int level)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, options, level));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    public interface IGraphQlArgumentBuilder
    {
        bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString);
    }
    
    public class GraphQlArgumentBuilderContext
    {
        public object Value { get; set; }
        public string FormatMask { get; set; }
        public GraphQlBuilderOptions Options { get; set; }
        public int Level { get; set; }
    }
    
    public class DefaultGraphQlArgumentBuilder : IGraphQlArgumentBuilder
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
    
        public static readonly DefaultGraphQlArgumentBuilder Instance = new();
    
        public bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString)
        {
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (context.Value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null:
                        graphQlString = "null";
                        return true;
    
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        graphQlString = GraphQlQueryHelper.BuildArgumentValue(jValue.Value, null, context.Options, context.Level);
                        return true;
    
                    case JTokenType.String:
                        graphQlString = $"\"{GraphQlQueryHelper.EscapeGraphQlStringValue((string)jValue.Value)}\"";
                        return true;
    
                    default:
                        graphQlString = $"\"{jValue.Value}\"";
                        return true;
                }
            }
    
            if (context.Value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                graphQlString = $"{jProperty.Name}:{(context.Options.Formatting == Formatting.Indented ? " " : null)}{GraphQlQueryHelper.BuildArgumentValue(jProperty.Value, null, context.Options, context.Level)}";
                return true;
            }
    
            if (context.Value is JObject jObject)
            {
                graphQlString = GraphQlQueryHelper.BuildEnumerableArgument(jObject, null, context.Options, context.Level + 1, '{', '}');
                return true;
            }
    #endif
    
            graphQlString = null;
            return false;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(global::System.Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(global::System.Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(global::System.Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public class GraphQlBuilderOptions
    {
        public Formatting Formatting { get; set; }
        public byte IndentationSize { get; set; } = 2;
        public IGraphQlArgumentBuilder ArgumentBuilder { get; set; }
    }
    
    public abstract partial class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(new GraphQlBuilderOptions { Formatting = formatting, IndentationSize = indentationSize });
        }
    
        public string Build(GraphQlBuilderOptions options)
        {
            return Build(options, 1);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields.Where(f => !f.RequiresParameters));
        }
    
        protected virtual string Build(GraphQlBuilderOptions options, int level)
        {
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            BuildOperationSignature(builder, options, indentationSpace, level);
    
            if (builder.Length > 0 || level > 1)
                builder.Append(indentationSpace);
    
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
    
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(options, level);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        private void BuildOperationSignature(StringBuilder builder, GraphQlBuilderOptions options, string indentationSpace, int level)
        {
            if (String.IsNullOrEmpty(_operationType))
                return;
    
            builder.Append(_operationType);
    
            if (!String.IsNullOrEmpty(_operationName))
            {
                builder.Append(" ");
                builder.Append(_operationName);
            }
    
            if (_queryParameters?.Count > 0)
            {
                builder.Append(indentationSpace);
                builder.Append("(");
    
                var separator = String.Empty;
                var isIndentedFormatting = options.Formatting == Formatting.Indented;
    
                foreach (var queryParameterInfo in _queryParameters)
                {
                    if (isIndentedFormatting)
                    {
                        builder.AppendLine(separator);
                        builder.Append(GraphQlQueryHelper.GetIndentation(level, options.IndentationSize));
                    }
                    else
                        builder.Append(separator);
    
                    builder.Append("$");
                    builder.Append(queryParameterInfo.ArgumentValue.Name);
                    builder.Append(":");
                    builder.Append(indentationSpace);
    
                    builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                    if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                    {
                        builder.Append(indentationSpace);
                        builder.Append("=");
                        builder.Append(indentationSpace);
                        builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, options, 0));
                    }
    
                    if (!isIndentedFormatting)
                        separator = ",";
                }
    
                builder.Append(")");
            }
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, 0, new Dictionary<global::System.Type, int>());
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, int level, Dictionary<global::System.Type, int> parentTypeLevel)
        {
            global::System.Type builderType = null;
    
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    int parentLevel;
                    if (_operationType != null && GetType() == field.QueryBuilderType ||
                        parentTypeLevel.TryGetValue(field.QueryBuilderType, out parentLevel) && parentLevel < level)
                        continue;
    
                    if (builderType == null)
                    {
                        builderType = GetType();
                        parentLevel = parentTypeLevel.TryGetValue(builderType, out parentLevel) ? parentLevel : level;
                        parentTypeLevel[builderType] = Math.Min(level, parentLevel);
                    }
    
                    var queryBuilder = InitializeChildQueryBuilder(field.QueryBuilderType, level, parentTypeLevel);
    
                    foreach (var includeFragmentMethod in field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod))
                    {
                        var includeFragmentParameterInfo = includeFragmentMethod.GetParameters();
                        var includeFragmentQueryBuilderType = includeFragmentParameterInfo[0].ParameterType;
                        if (parentTypeLevel.TryGetValue(includeFragmentQueryBuilderType, out parentLevel))
                            continue;
    
                        var includeFragmentParameters = new object[includeFragmentParameterInfo.Length];
                        includeFragmentParameters[0] = InitializeChildQueryBuilder(includeFragmentQueryBuilderType, level, parentTypeLevel);
                        includeFragmentMethod.Invoke(queryBuilder, includeFragmentParameters);
                    }
    
                    if (queryBuilder._fieldCriteria.Count > 0 || queryBuilder._fragments != null)
                        IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildQueryBuilder(global::System.Type queryBuilderType, int level, Dictionary<global::System.Type, int> parentTypeLevel)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(
                queryBuilder.AllFields.Where(f => !f.RequiresParameters),
                level + 1,
                parentTypeLevel);
    
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Count(p => !p.IsOptional) == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
    
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(GraphQlBuilderOptions options, int level);
    
            protected string BuildArgumentClause(GraphQlBuilderOptions options, int level)
            {
                var separator = options.Formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, options, level) : $"${a.ArgumentValue.Name}")}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(GraphQlBuilderOptions options, int level) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, options, level)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : $"{alias}:{separator}";
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                GetIndentation(options.Formatting, level, options.IndentationSize) +
                BuildAliasPrefix(Alias, options.Formatting) +
                FieldName +
                BuildArgumentClause(options, level) +
                BuildDirectiveClause(options, level);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(options.Formatting, level, options.IndentationSize) + BuildAliasPrefix(Alias, options.Formatting) + FieldName +
                      BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(options.Formatting, level, options.IndentationSize) + "..." + (options.Formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1);
        }
    }
    
    public abstract partial class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        /// <summary>
        /// Includes all fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes all scalar fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex && !f.RequiresParameters));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes "__typename" field; included automatically for interface and union types.
        /// </summary>
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string BigDecimal = "BigDecimal";
        public const string BigInt = "BigInt";
        public const string Boolean = "Boolean";
        public const string Bytes = "Bytes";
        public const string Float = "Float";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string Int8 = "Int8";
        public const string String = "String";
        public const string Timestamp = "Timestamp";

        public const string SubgraphErrorPolicy = "_SubgraphErrorPolicy_";
        public const string AggregationInterval = "Aggregation_interval";
        public const string GovernorUpdatedOrderBy = "GovernorUpdated_orderBy";
        public const string MultiTransferredErc20OrderBy = "MultiTransferredERC20_orderBy";
        public const string MultiTransferredEthOrderBy = "MultiTransferredETH_orderBy";
        public const string NewFeeAmountOrderBy = "NewFeeAmount_orderBy";
        public const string NewFeeTokenOrderBy = "NewFeeToken_orderBy";
        public const string OrderDirection = "OrderDirection";
        public const string OwnershipTransferredOrderBy = "OwnershipTransferred_orderBy";
        public const string PausedOrderBy = "Paused_orderBy";
        public const string TransferInOrderBy = "TransferIn_orderBy";
        public const string TransferInEthOrderBy = "TransferInETH_orderBy";
        public const string TransferOutOrderBy = "TransferOut_orderBy";
        public const string UnpausedOrderBy = "Unpaused_orderBy";

        public const string Block = "_Block_";
        public const string Meta = "_Meta_";
        public const string GovernorUpdated = "GovernorUpdated";
        public const string MultiTransferredErc20 = "MultiTransferredERC20";
        public const string MultiTransferredEth = "MultiTransferredETH";
        public const string NewFeeAmount = "NewFeeAmount";
        public const string NewFeeToken = "NewFeeToken";
        public const string OwnershipTransferred = "OwnershipTransferred";
        public const string Paused = "Paused";
        public const string Query = "Query";
        public const string TransferIn = "TransferIn";
        public const string TransferInEth = "TransferInETH";
        public const string TransferOut = "TransferOut";
        public const string Unpaused = "Unpaused";

        public const string BlockHeight = "Block_height";
        public const string BlockChangedFilter = "BlockChangedFilter";
        public const string GovernorUpdatedFilter = "GovernorUpdated_filter";
        public const string MultiTransferredErc20Filter = "MultiTransferredERC20_filter";
        public const string MultiTransferredEthFilter = "MultiTransferredETH_filter";
        public const string NewFeeAmountFilter = "NewFeeAmount_filter";
        public const string NewFeeTokenFilter = "NewFeeToken_filter";
        public const string OwnershipTransferredFilter = "OwnershipTransferred_filter";
        public const string PausedFilter = "Paused_filter";
        public const string TransferInFilter = "TransferIn_filter";
        public const string TransferInEthFilter = "TransferInETH_filter";
        public const string TransferOutFilter = "TransferOut_filter";
        public const string UnpausedFilter = "Unpaused_filter";

        public static readonly IReadOnlyDictionary<global::System.Type, string> ReverseMapping =
            new Dictionary<global::System.Type, string>
            {
                { typeof(string), "Bytes" },
                { typeof(int), "Int" },
                { typeof(bool), "Boolean" },
                { typeof(System.Numerics.BigInteger), "BigInt" },
                { typeof(BlockHeight), "Block_height" },
                { typeof(BlockChangedFilter), "BlockChangedFilter" },
                { typeof(GovernorUpdatedFilter), "GovernorUpdated_filter" },
                { typeof(MultiTransferredErc20Filter), "MultiTransferredERC20_filter" },
                { typeof(MultiTransferredEthFilter), "MultiTransferredETH_filter" },
                { typeof(NewFeeAmountFilter), "NewFeeAmount_filter" },
                { typeof(NewFeeTokenFilter), "NewFeeToken_filter" },
                { typeof(OwnershipTransferredFilter), "OwnershipTransferred_filter" },
                { typeof(PausedFilter), "Paused_filter" },
                { typeof(TransferInFilter), "TransferIn_filter" },
                { typeof(TransferInEthFilter), "TransferInETH_filter" },
                { typeof(TransferOutFilter), "TransferOut_filter" },
                { typeof(UnpausedFilter), "Unpaused_filter" }
            };
    }
    #endregion

    #region enums
    public enum AggregationInterval
    {
        [EnumMember(Value = "hour")] Hour,
        [EnumMember(Value = "day")] Day
    }

    public enum GovernorUpdatedOrderBy
    {
        [EnumMember(Value = "id")] Id,
        oldGovernor,
        newGovernor,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum MultiTransferredErc20OrderBy
    {
        [EnumMember(Value = "id")] Id,
        [EnumMember(Value = "token")] Token,
        userCount,
        totalAmount,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum MultiTransferredEthOrderBy
    {
        [EnumMember(Value = "id")] Id,
        userCount,
        totalAmount,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum NewFeeAmountOrderBy
    {
        [EnumMember(Value = "id")] Id,
        NewFeeAmount,
        OldFeeAmount,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum NewFeeTokenOrderBy
    {
        [EnumMember(Value = "id")] Id,
        NewFeeToken,
        OldFeeToken,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum OrderDirection
    {
        [EnumMember(Value = "asc")] Asc,
        [EnumMember(Value = "desc")] Desc
    }

    public enum OwnershipTransferredOrderBy
    {
        [EnumMember(Value = "id")] Id,
        previousOwner,
        newOwner,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum PausedOrderBy
    {
        [EnumMember(Value = "id")] Id,
        [EnumMember(Value = "account")] Account,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum TransferInEthOrderBy
    {
        [EnumMember(Value = "id")] Id,
        Amount,
        From,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum TransferInOrderBy
    {
        [EnumMember(Value = "id")] Id,
        Amount,
        From,
        Token,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum TransferOutOrderBy
    {
        [EnumMember(Value = "id")] Id,
        Amount,
        To,
        Token,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum UnpausedOrderBy
    {
        [EnumMember(Value = "id")] Id,
        [EnumMember(Value = "account")] Account,
        blockNumber,
        blockTimestamp,
        transactionHash
    }

    public enum SubgraphErrorPolicy
    {
        [EnumMember(Value = "allow")] Allow,
        [EnumMember(Value = "deny")] Deny
    }
    #endregion

    #region directives
    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }

    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class EntityDirective : GraphQlDirective
    {
        public EntityDirective() : base("entity")
        {
        }
    }

    public class SubgraphIdDirective : GraphQlDirective
    {
        public SubgraphIdDirective(QueryBuilderParameter<string> id) : base("subgraphId")
        {
            AddArgument("id", id);
        }
    }
    #endregion

    #region builder classes
    public partial class GovernorUpdatedQueryBuilder : GraphQlQueryBuilder<GovernorUpdatedQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "oldGovernor" },
                new GraphQlFieldMetadata { Name = "newGovernor" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "GovernorUpdated"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GovernorUpdatedQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public GovernorUpdatedQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GovernorUpdatedQueryBuilder WithOldGovernor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("oldGovernor", alias, new GraphQlDirective[] { skip, include });
        }

        public GovernorUpdatedQueryBuilder ExceptOldGovernor()
        {
            return ExceptField("oldGovernor");
        }

        public GovernorUpdatedQueryBuilder WithNewGovernor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("newGovernor", alias, new GraphQlDirective[] { skip, include });
        }

        public GovernorUpdatedQueryBuilder ExceptNewGovernor()
        {
            return ExceptField("newGovernor");
        }

        public GovernorUpdatedQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public GovernorUpdatedQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public GovernorUpdatedQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public GovernorUpdatedQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public GovernorUpdatedQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public GovernorUpdatedQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class MultiTransferredErc20QueryBuilder : GraphQlQueryBuilder<MultiTransferredErc20QueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "token" },
                new GraphQlFieldMetadata { Name = "userCount" },
                new GraphQlFieldMetadata { Name = "totalAmount" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "MultiTransferredERC20"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MultiTransferredErc20QueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredErc20QueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MultiTransferredErc20QueryBuilder WithToken(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("token", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredErc20QueryBuilder ExceptToken()
        {
            return ExceptField("token");
        }

        public MultiTransferredErc20QueryBuilder WithUserCount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userCount", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredErc20QueryBuilder ExceptUserCount()
        {
            return ExceptField("userCount");
        }

        public MultiTransferredErc20QueryBuilder WithTotalAmount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("totalAmount", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredErc20QueryBuilder ExceptTotalAmount()
        {
            return ExceptField("totalAmount");
        }

        public MultiTransferredErc20QueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredErc20QueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public MultiTransferredErc20QueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredErc20QueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public MultiTransferredErc20QueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredErc20QueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class MultiTransferredEthQueryBuilder : GraphQlQueryBuilder<MultiTransferredEthQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "userCount" },
                new GraphQlFieldMetadata { Name = "totalAmount" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "MultiTransferredETH"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MultiTransferredEthQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredEthQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MultiTransferredEthQueryBuilder WithUserCount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userCount", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredEthQueryBuilder ExceptUserCount()
        {
            return ExceptField("userCount");
        }

        public MultiTransferredEthQueryBuilder WithTotalAmount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("totalAmount", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredEthQueryBuilder ExceptTotalAmount()
        {
            return ExceptField("totalAmount");
        }

        public MultiTransferredEthQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredEthQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public MultiTransferredEthQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredEthQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public MultiTransferredEthQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public MultiTransferredEthQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class NewFeeAmountQueryBuilder : GraphQlQueryBuilder<NewFeeAmountQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "NewFeeAmount" },
                new GraphQlFieldMetadata { Name = "OldFeeAmount" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "NewFeeAmount"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NewFeeAmountQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeAmountQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public NewFeeAmountQueryBuilder WithNewFeeAmount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("NewFeeAmount", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeAmountQueryBuilder ExceptNewFeeAmount()
        {
            return ExceptField("NewFeeAmount");
        }

        public NewFeeAmountQueryBuilder WithOldFeeAmount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("OldFeeAmount", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeAmountQueryBuilder ExceptOldFeeAmount()
        {
            return ExceptField("OldFeeAmount");
        }

        public NewFeeAmountQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeAmountQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public NewFeeAmountQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeAmountQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public NewFeeAmountQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeAmountQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class NewFeeTokenQueryBuilder : GraphQlQueryBuilder<NewFeeTokenQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "NewFeeToken" },
                new GraphQlFieldMetadata { Name = "OldFeeToken" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "NewFeeToken"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NewFeeTokenQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeTokenQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public NewFeeTokenQueryBuilder WithNewFeeToken(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("NewFeeToken", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeTokenQueryBuilder ExceptNewFeeToken()
        {
            return ExceptField("NewFeeToken");
        }

        public NewFeeTokenQueryBuilder WithOldFeeToken(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("OldFeeToken", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeTokenQueryBuilder ExceptOldFeeToken()
        {
            return ExceptField("OldFeeToken");
        }

        public NewFeeTokenQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeTokenQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public NewFeeTokenQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeTokenQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public NewFeeTokenQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public NewFeeTokenQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class OwnershipTransferredQueryBuilder : GraphQlQueryBuilder<OwnershipTransferredQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "previousOwner" },
                new GraphQlFieldMetadata { Name = "newOwner" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "OwnershipTransferred"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OwnershipTransferredQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public OwnershipTransferredQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public OwnershipTransferredQueryBuilder WithPreviousOwner(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("previousOwner", alias, new GraphQlDirective[] { skip, include });
        }

        public OwnershipTransferredQueryBuilder ExceptPreviousOwner()
        {
            return ExceptField("previousOwner");
        }

        public OwnershipTransferredQueryBuilder WithNewOwner(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("newOwner", alias, new GraphQlDirective[] { skip, include });
        }

        public OwnershipTransferredQueryBuilder ExceptNewOwner()
        {
            return ExceptField("newOwner");
        }

        public OwnershipTransferredQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public OwnershipTransferredQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public OwnershipTransferredQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public OwnershipTransferredQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public OwnershipTransferredQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public OwnershipTransferredQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class PausedQueryBuilder : GraphQlQueryBuilder<PausedQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "account" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "Paused"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PausedQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public PausedQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PausedQueryBuilder WithAccount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("account", alias, new GraphQlDirective[] { skip, include });
        }

        public PausedQueryBuilder ExceptAccount()
        {
            return ExceptField("account");
        }

        public PausedQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public PausedQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public PausedQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public PausedQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public PausedQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public PausedQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "governorUpdated", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GovernorUpdatedQueryBuilder) },
                new GraphQlFieldMetadata { Name = "governorUpdateds", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GovernorUpdatedQueryBuilder) },
                new GraphQlFieldMetadata { Name = "multiTransferredERC20", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MultiTransferredErc20QueryBuilder) },
                new GraphQlFieldMetadata { Name = "multiTransferredERC20S", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MultiTransferredErc20QueryBuilder) },
                new GraphQlFieldMetadata { Name = "multiTransferredETH", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MultiTransferredEthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "multiTransferredETHs", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MultiTransferredEthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "newFeeAmount", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NewFeeAmountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "newFeeAmounts", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NewFeeAmountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "newFeeToken", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NewFeeTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "newFeeTokens", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NewFeeTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ownershipTransferred", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(OwnershipTransferredQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ownershipTransferreds", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(OwnershipTransferredQueryBuilder) },
                new GraphQlFieldMetadata { Name = "paused", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PausedQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pauseds", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PausedQueryBuilder) },
                new GraphQlFieldMetadata { Name = "transferIn", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TransferInQueryBuilder) },
                new GraphQlFieldMetadata { Name = "transferIns", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TransferInQueryBuilder) },
                new GraphQlFieldMetadata { Name = "transferInETH", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TransferInEthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "transferInETHs", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TransferInEthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "transferOut", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TransferOutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "transferOuts", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TransferOutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "unpaused", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UnpausedQueryBuilder) },
                new GraphQlFieldMetadata { Name = "unpauseds", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UnpausedQueryBuilder) },
                new GraphQlFieldMetadata { Name = "_meta", IsComplex = true, QueryBuilderType = typeof(MetaQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithGovernorUpdated(GovernorUpdatedQueryBuilder governorUpdatedQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("governorUpdated", alias, governorUpdatedQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptGovernorUpdated()
        {
            return ExceptField("governorUpdated");
        }

        public QueryQueryBuilder WithGovernorUpdateds(GovernorUpdatedQueryBuilder governorUpdatedQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<GovernorUpdatedOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<GovernorUpdatedFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("governorUpdateds", alias, governorUpdatedQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptGovernorUpdateds()
        {
            return ExceptField("governorUpdateds");
        }

        public QueryQueryBuilder WithMultiTransferredErc20(MultiTransferredErc20QueryBuilder multiTransferredErc20QueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("multiTransferredERC20", alias, multiTransferredErc20QueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptMultiTransferredErc20()
        {
            return ExceptField("multiTransferredERC20");
        }

        public QueryQueryBuilder WithMultiTransferredErc20S(MultiTransferredErc20QueryBuilder multiTransferredErc20QueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<MultiTransferredErc20OrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<MultiTransferredErc20Filter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("multiTransferredERC20S", alias, multiTransferredErc20QueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptMultiTransferredErc20S()
        {
            return ExceptField("multiTransferredERC20S");
        }

        public QueryQueryBuilder WithMultiTransferredEth(MultiTransferredEthQueryBuilder multiTransferredEthQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("multiTransferredETH", alias, multiTransferredEthQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptMultiTransferredEth()
        {
            return ExceptField("multiTransferredETH");
        }

        public QueryQueryBuilder WithMultiTransferredEtHs(MultiTransferredEthQueryBuilder multiTransferredEthQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<MultiTransferredEthOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<MultiTransferredEthFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("multiTransferredETHs", alias, multiTransferredEthQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptMultiTransferredEtHs()
        {
            return ExceptField("multiTransferredETHs");
        }

        public QueryQueryBuilder WithNewFeeAmount(NewFeeAmountQueryBuilder newFeeAmountQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("newFeeAmount", alias, newFeeAmountQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptNewFeeAmount()
        {
            return ExceptField("newFeeAmount");
        }

        public QueryQueryBuilder WithNewFeeAmounts(NewFeeAmountQueryBuilder newFeeAmountQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<NewFeeAmountOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<NewFeeAmountFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("newFeeAmounts", alias, newFeeAmountQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptNewFeeAmounts()
        {
            return ExceptField("newFeeAmounts");
        }

        public QueryQueryBuilder WithNewFeeToken(NewFeeTokenQueryBuilder newFeeTokenQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("newFeeToken", alias, newFeeTokenQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptNewFeeToken()
        {
            return ExceptField("newFeeToken");
        }

        public QueryQueryBuilder WithNewFeeTokens(NewFeeTokenQueryBuilder newFeeTokenQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<NewFeeTokenOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<NewFeeTokenFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("newFeeTokens", alias, newFeeTokenQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptNewFeeTokens()
        {
            return ExceptField("newFeeTokens");
        }

        public QueryQueryBuilder WithOwnershipTransferred(OwnershipTransferredQueryBuilder ownershipTransferredQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("ownershipTransferred", alias, ownershipTransferredQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptOwnershipTransferred()
        {
            return ExceptField("ownershipTransferred");
        }

        public QueryQueryBuilder WithOwnershipTransferreds(OwnershipTransferredQueryBuilder ownershipTransferredQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<OwnershipTransferredOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<OwnershipTransferredFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("ownershipTransferreds", alias, ownershipTransferredQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptOwnershipTransferreds()
        {
            return ExceptField("ownershipTransferreds");
        }

        public QueryQueryBuilder WithPaused(PausedQueryBuilder pausedQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("paused", alias, pausedQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptPaused()
        {
            return ExceptField("paused");
        }

        public QueryQueryBuilder WithPauseds(PausedQueryBuilder pausedQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<PausedOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<PausedFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("pauseds", alias, pausedQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptPauseds()
        {
            return ExceptField("pauseds");
        }

        public QueryQueryBuilder WithTransferIn(TransferInQueryBuilder transferInQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("transferIn", alias, transferInQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptTransferIn()
        {
            return ExceptField("transferIn");
        }

        public QueryQueryBuilder WithTransferIns(TransferInQueryBuilder transferInQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<TransferInOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<TransferInFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("transferIns", alias, transferInQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptTransferIns()
        {
            return ExceptField("transferIns");
        }

        public QueryQueryBuilder WithTransferInEth(TransferInEthQueryBuilder transferInEthQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("transferInETH", alias, transferInEthQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptTransferInEth()
        {
            return ExceptField("transferInETH");
        }

        public QueryQueryBuilder WithTransferInEtHs(TransferInEthQueryBuilder transferInEthQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<TransferInEthOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<TransferInEthFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("transferInETHs", alias, transferInEthQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptTransferInEtHs()
        {
            return ExceptField("transferInETHs");
        }

        public QueryQueryBuilder WithTransferOut(TransferOutQueryBuilder transferOutQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("transferOut", alias, transferOutQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptTransferOut()
        {
            return ExceptField("transferOut");
        }

        public QueryQueryBuilder WithTransferOuts(TransferOutQueryBuilder transferOutQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<TransferOutOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<TransferOutFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("transferOuts", alias, transferOutQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptTransferOuts()
        {
            return ExceptField("transferOuts");
        }

        public QueryQueryBuilder WithUnpaused(UnpausedQueryBuilder unpausedQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("unpaused", alias, unpausedQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptUnpaused()
        {
            return ExceptField("unpaused");
        }

        public QueryQueryBuilder WithUnpauseds(UnpausedQueryBuilder unpausedQueryBuilder, QueryBuilderParameter<SubgraphErrorPolicy> subgraphError, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<UnpausedOrderBy?> orderBy = null, QueryBuilderParameter<OrderDirection?> orderDirection = null, QueryBuilderParameter<UnpausedFilter> where = null, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skipDirective = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderDirection != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderDirection", ArgumentValue = orderDirection} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subgraphError", ArgumentValue = subgraphError} );
            return WithObjectField("unpauseds", alias, unpausedQueryBuilder, new GraphQlDirective[] { skipDirective, include }, args);
        }

        public QueryQueryBuilder ExceptUnpauseds()
        {
            return ExceptField("unpauseds");
        }

        public QueryQueryBuilder WithMeta(MetaQueryBuilder metaQueryBuilder, QueryBuilderParameter<BlockHeight> block = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (block != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "block", ArgumentValue = block} );

            return WithObjectField("_meta", alias, metaQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptMeta()
        {
            return ExceptField("_meta");
        }
    }

    public partial class TransferInQueryBuilder : GraphQlQueryBuilder<TransferInQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Amount" },
                new GraphQlFieldMetadata { Name = "From" },
                new GraphQlFieldMetadata { Name = "Token" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "TransferIn"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TransferInQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TransferInQueryBuilder WithAmount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("Amount", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInQueryBuilder ExceptAmount()
        {
            return ExceptField("Amount");
        }

        public TransferInQueryBuilder WithFrom(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("From", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInQueryBuilder ExceptFrom()
        {
            return ExceptField("From");
        }

        public TransferInQueryBuilder WithToken(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("Token", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInQueryBuilder ExceptToken()
        {
            return ExceptField("Token");
        }

        public TransferInQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public TransferInQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public TransferInQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class TransferInEthQueryBuilder : GraphQlQueryBuilder<TransferInEthQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Amount" },
                new GraphQlFieldMetadata { Name = "From" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "TransferInETH"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TransferInEthQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInEthQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TransferInEthQueryBuilder WithAmount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("Amount", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInEthQueryBuilder ExceptAmount()
        {
            return ExceptField("Amount");
        }

        public TransferInEthQueryBuilder WithFrom(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("From", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInEthQueryBuilder ExceptFrom()
        {
            return ExceptField("From");
        }

        public TransferInEthQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInEthQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public TransferInEthQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInEthQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public TransferInEthQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferInEthQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class TransferOutQueryBuilder : GraphQlQueryBuilder<TransferOutQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Amount" },
                new GraphQlFieldMetadata { Name = "To" },
                new GraphQlFieldMetadata { Name = "Token" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "TransferOut"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TransferOutQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferOutQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TransferOutQueryBuilder WithAmount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("Amount", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferOutQueryBuilder ExceptAmount()
        {
            return ExceptField("Amount");
        }

        public TransferOutQueryBuilder WithTo(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("To", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferOutQueryBuilder ExceptTo()
        {
            return ExceptField("To");
        }

        public TransferOutQueryBuilder WithToken(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("Token", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferOutQueryBuilder ExceptToken()
        {
            return ExceptField("Token");
        }

        public TransferOutQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferOutQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public TransferOutQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferOutQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public TransferOutQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public TransferOutQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class UnpausedQueryBuilder : GraphQlQueryBuilder<UnpausedQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "account" },
                new GraphQlFieldMetadata { Name = "blockNumber" },
                new GraphQlFieldMetadata { Name = "blockTimestamp" },
                new GraphQlFieldMetadata { Name = "transactionHash" }
            };

        protected override string TypeName { get { return "Unpaused"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UnpausedQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public UnpausedQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UnpausedQueryBuilder WithAccount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("account", alias, new GraphQlDirective[] { skip, include });
        }

        public UnpausedQueryBuilder ExceptAccount()
        {
            return ExceptField("account");
        }

        public UnpausedQueryBuilder WithBlockNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public UnpausedQueryBuilder ExceptBlockNumber()
        {
            return ExceptField("blockNumber");
        }

        public UnpausedQueryBuilder WithBlockTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("blockTimestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public UnpausedQueryBuilder ExceptBlockTimestamp()
        {
            return ExceptField("blockTimestamp");
        }

        public UnpausedQueryBuilder WithTransactionHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("transactionHash", alias, new GraphQlDirective[] { skip, include });
        }

        public UnpausedQueryBuilder ExceptTransactionHash()
        {
            return ExceptField("transactionHash");
        }
    }

    public partial class BlockQueryBuilder : GraphQlQueryBuilder<BlockQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "hash" },
                new GraphQlFieldMetadata { Name = "number" },
                new GraphQlFieldMetadata { Name = "timestamp" },
                new GraphQlFieldMetadata { Name = "parentHash" }
            };

        protected override string TypeName { get { return "_Block_"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BlockQueryBuilder WithHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("hash", alias, new GraphQlDirective[] { skip, include });
        }

        public BlockQueryBuilder ExceptHash()
        {
            return ExceptField("hash");
        }

        public BlockQueryBuilder WithNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("number", alias, new GraphQlDirective[] { skip, include });
        }

        public BlockQueryBuilder ExceptNumber()
        {
            return ExceptField("number");
        }

        public BlockQueryBuilder WithTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("timestamp", alias, new GraphQlDirective[] { skip, include });
        }

        public BlockQueryBuilder ExceptTimestamp()
        {
            return ExceptField("timestamp");
        }

        public BlockQueryBuilder WithParentHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("parentHash", alias, new GraphQlDirective[] { skip, include });
        }

        public BlockQueryBuilder ExceptParentHash()
        {
            return ExceptField("parentHash");
        }
    }

    public partial class MetaQueryBuilder : GraphQlQueryBuilder<MetaQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "block", IsComplex = true, QueryBuilderType = typeof(BlockQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deployment" },
                new GraphQlFieldMetadata { Name = "hasIndexingErrors" }
            };

        protected override string TypeName { get { return "_Meta_"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MetaQueryBuilder WithBlock(BlockQueryBuilder blockQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("block", alias, blockQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public MetaQueryBuilder ExceptBlock()
        {
            return ExceptField("block");
        }

        public MetaQueryBuilder WithDeployment(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("deployment", alias, new GraphQlDirective[] { skip, include });
        }

        public MetaQueryBuilder ExceptDeployment()
        {
            return ExceptField("deployment");
        }

        public MetaQueryBuilder WithHasIndexingErrors(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("hasIndexingErrors", alias, new GraphQlDirective[] { skip, include });
        }

        public MetaQueryBuilder ExceptHasIndexingErrors()
        {
            return ExceptField("hasIndexingErrors");
        }
    }
    #endregion

    #region input classes
    public partial class BlockChangedFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _numberGte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("number_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> NumberGte
        {
            get { return (QueryBuilderParameter<int?>)_numberGte.Value; }
            set { _numberGte = new InputPropertyInfo { Name = "number_gte", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_numberGte.Name != null) yield return _numberGte;
        }
    }

    public partial class BlockHeight : IGraphQlInputObject
    {
        private InputPropertyInfo _hash;
        private InputPropertyInfo _number;
        private InputPropertyInfo _numberGte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Hash
        {
            get { return (QueryBuilderParameter<string>)_hash.Value; }
            set { _hash = new InputPropertyInfo { Name = "hash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Number
        {
            get { return (QueryBuilderParameter<int?>)_number.Value; }
            set { _number = new InputPropertyInfo { Name = "number", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("number_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> NumberGte
        {
            get { return (QueryBuilderParameter<int?>)_numberGte.Value; }
            set { _numberGte = new InputPropertyInfo { Name = "number_gte", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_hash.Name != null) yield return _hash;
            if (_number.Name != null) yield return _number;
            if (_numberGte.Name != null) yield return _numberGte;
        }
    }

    public partial class GovernorUpdatedFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _oldGovernor;
        private InputPropertyInfo _oldGovernorNot;
        private InputPropertyInfo _oldGovernorGt;
        private InputPropertyInfo _oldGovernorLt;
        private InputPropertyInfo _oldGovernorGte;
        private InputPropertyInfo _oldGovernorLte;
        private InputPropertyInfo _oldGovernorIn;
        private InputPropertyInfo _oldGovernorNotIn;
        private InputPropertyInfo _oldGovernorContains;
        private InputPropertyInfo _oldGovernorNotContains;
        private InputPropertyInfo _newGovernor;
        private InputPropertyInfo _newGovernorNot;
        private InputPropertyInfo _newGovernorGt;
        private InputPropertyInfo _newGovernorLt;
        private InputPropertyInfo _newGovernorGte;
        private InputPropertyInfo _newGovernorLte;
        private InputPropertyInfo _newGovernorIn;
        private InputPropertyInfo _newGovernorNotIn;
        private InputPropertyInfo _newGovernorContains;
        private InputPropertyInfo _newGovernorNotContains;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldGovernor
        {
            get { return (QueryBuilderParameter<string>)_oldGovernor.Value; }
            set { _oldGovernor = new InputPropertyInfo { Name = "oldGovernor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldGovernorNot
        {
            get { return (QueryBuilderParameter<string>)_oldGovernorNot.Value; }
            set { _oldGovernorNot = new InputPropertyInfo { Name = "oldGovernor_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldGovernorGt
        {
            get { return (QueryBuilderParameter<string>)_oldGovernorGt.Value; }
            set { _oldGovernorGt = new InputPropertyInfo { Name = "oldGovernor_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldGovernorLt
        {
            get { return (QueryBuilderParameter<string>)_oldGovernorLt.Value; }
            set { _oldGovernorLt = new InputPropertyInfo { Name = "oldGovernor_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldGovernorGte
        {
            get { return (QueryBuilderParameter<string>)_oldGovernorGte.Value; }
            set { _oldGovernorGte = new InputPropertyInfo { Name = "oldGovernor_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldGovernorLte
        {
            get { return (QueryBuilderParameter<string>)_oldGovernorLte.Value; }
            set { _oldGovernorLte = new InputPropertyInfo { Name = "oldGovernor_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> OldGovernorIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_oldGovernorIn.Value; }
            set { _oldGovernorIn = new InputPropertyInfo { Name = "oldGovernor_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> OldGovernorNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_oldGovernorNotIn.Value; }
            set { _oldGovernorNotIn = new InputPropertyInfo { Name = "oldGovernor_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldGovernorContains
        {
            get { return (QueryBuilderParameter<string>)_oldGovernorContains.Value; }
            set { _oldGovernorContains = new InputPropertyInfo { Name = "oldGovernor_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("oldGovernor_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldGovernorNotContains
        {
            get { return (QueryBuilderParameter<string>)_oldGovernorNotContains.Value; }
            set { _oldGovernorNotContains = new InputPropertyInfo { Name = "oldGovernor_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewGovernor
        {
            get { return (QueryBuilderParameter<string>)_newGovernor.Value; }
            set { _newGovernor = new InputPropertyInfo { Name = "newGovernor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewGovernorNot
        {
            get { return (QueryBuilderParameter<string>)_newGovernorNot.Value; }
            set { _newGovernorNot = new InputPropertyInfo { Name = "newGovernor_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewGovernorGt
        {
            get { return (QueryBuilderParameter<string>)_newGovernorGt.Value; }
            set { _newGovernorGt = new InputPropertyInfo { Name = "newGovernor_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewGovernorLt
        {
            get { return (QueryBuilderParameter<string>)_newGovernorLt.Value; }
            set { _newGovernorLt = new InputPropertyInfo { Name = "newGovernor_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewGovernorGte
        {
            get { return (QueryBuilderParameter<string>)_newGovernorGte.Value; }
            set { _newGovernorGte = new InputPropertyInfo { Name = "newGovernor_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewGovernorLte
        {
            get { return (QueryBuilderParameter<string>)_newGovernorLte.Value; }
            set { _newGovernorLte = new InputPropertyInfo { Name = "newGovernor_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NewGovernorIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_newGovernorIn.Value; }
            set { _newGovernorIn = new InputPropertyInfo { Name = "newGovernor_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NewGovernorNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_newGovernorNotIn.Value; }
            set { _newGovernorNotIn = new InputPropertyInfo { Name = "newGovernor_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewGovernorContains
        {
            get { return (QueryBuilderParameter<string>)_newGovernorContains.Value; }
            set { _newGovernorContains = new InputPropertyInfo { Name = "newGovernor_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newGovernor_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewGovernorNotContains
        {
            get { return (QueryBuilderParameter<string>)_newGovernorNotContains.Value; }
            set { _newGovernorNotContains = new InputPropertyInfo { Name = "newGovernor_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GovernorUpdatedFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<GovernorUpdatedFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<GovernorUpdatedFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GovernorUpdatedFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<GovernorUpdatedFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<GovernorUpdatedFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_oldGovernor.Name != null) yield return _oldGovernor;
            if (_oldGovernorNot.Name != null) yield return _oldGovernorNot;
            if (_oldGovernorGt.Name != null) yield return _oldGovernorGt;
            if (_oldGovernorLt.Name != null) yield return _oldGovernorLt;
            if (_oldGovernorGte.Name != null) yield return _oldGovernorGte;
            if (_oldGovernorLte.Name != null) yield return _oldGovernorLte;
            if (_oldGovernorIn.Name != null) yield return _oldGovernorIn;
            if (_oldGovernorNotIn.Name != null) yield return _oldGovernorNotIn;
            if (_oldGovernorContains.Name != null) yield return _oldGovernorContains;
            if (_oldGovernorNotContains.Name != null) yield return _oldGovernorNotContains;
            if (_newGovernor.Name != null) yield return _newGovernor;
            if (_newGovernorNot.Name != null) yield return _newGovernorNot;
            if (_newGovernorGt.Name != null) yield return _newGovernorGt;
            if (_newGovernorLt.Name != null) yield return _newGovernorLt;
            if (_newGovernorGte.Name != null) yield return _newGovernorGte;
            if (_newGovernorLte.Name != null) yield return _newGovernorLte;
            if (_newGovernorIn.Name != null) yield return _newGovernorIn;
            if (_newGovernorNotIn.Name != null) yield return _newGovernorNotIn;
            if (_newGovernorContains.Name != null) yield return _newGovernorContains;
            if (_newGovernorNotContains.Name != null) yield return _newGovernorNotContains;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class MultiTransferredErc20Filter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _token;
        private InputPropertyInfo _tokenNot;
        private InputPropertyInfo _tokenGt;
        private InputPropertyInfo _tokenLt;
        private InputPropertyInfo _tokenGte;
        private InputPropertyInfo _tokenLte;
        private InputPropertyInfo _tokenIn;
        private InputPropertyInfo _tokenNotIn;
        private InputPropertyInfo _tokenContains;
        private InputPropertyInfo _tokenNotContains;
        private InputPropertyInfo _userCount;
        private InputPropertyInfo _userCountNot;
        private InputPropertyInfo _userCountGt;
        private InputPropertyInfo _userCountLt;
        private InputPropertyInfo _userCountGte;
        private InputPropertyInfo _userCountLte;
        private InputPropertyInfo _userCountIn;
        private InputPropertyInfo _userCountNotIn;
        private InputPropertyInfo _totalAmount;
        private InputPropertyInfo _totalAmountNot;
        private InputPropertyInfo _totalAmountGt;
        private InputPropertyInfo _totalAmountLt;
        private InputPropertyInfo _totalAmountGte;
        private InputPropertyInfo _totalAmountLte;
        private InputPropertyInfo _totalAmountIn;
        private InputPropertyInfo _totalAmountNotIn;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Token
        {
            get { return (QueryBuilderParameter<string>)_token.Value; }
            set { _token = new InputPropertyInfo { Name = "token", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenNot
        {
            get { return (QueryBuilderParameter<string>)_tokenNot.Value; }
            set { _tokenNot = new InputPropertyInfo { Name = "token_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenGt
        {
            get { return (QueryBuilderParameter<string>)_tokenGt.Value; }
            set { _tokenGt = new InputPropertyInfo { Name = "token_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenLt
        {
            get { return (QueryBuilderParameter<string>)_tokenLt.Value; }
            set { _tokenLt = new InputPropertyInfo { Name = "token_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenGte
        {
            get { return (QueryBuilderParameter<string>)_tokenGte.Value; }
            set { _tokenGte = new InputPropertyInfo { Name = "token_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenLte
        {
            get { return (QueryBuilderParameter<string>)_tokenLte.Value; }
            set { _tokenLte = new InputPropertyInfo { Name = "token_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TokenIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_tokenIn.Value; }
            set { _tokenIn = new InputPropertyInfo { Name = "token_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TokenNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_tokenNotIn.Value; }
            set { _tokenNotIn = new InputPropertyInfo { Name = "token_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenContains
        {
            get { return (QueryBuilderParameter<string>)_tokenContains.Value; }
            set { _tokenContains = new InputPropertyInfo { Name = "token_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("token_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenNotContains
        {
            get { return (QueryBuilderParameter<string>)_tokenNotContains.Value; }
            set { _tokenNotContains = new InputPropertyInfo { Name = "token_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCount.Value; }
            set { _userCount = new InputPropertyInfo { Name = "userCount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountNot.Value; }
            set { _userCountNot = new InputPropertyInfo { Name = "userCount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountGt.Value; }
            set { _userCountGt = new InputPropertyInfo { Name = "userCount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountLt.Value; }
            set { _userCountLt = new InputPropertyInfo { Name = "userCount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountGte.Value; }
            set { _userCountGte = new InputPropertyInfo { Name = "userCount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountLte.Value; }
            set { _userCountLte = new InputPropertyInfo { Name = "userCount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> UserCountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_userCountIn.Value; }
            set { _userCountIn = new InputPropertyInfo { Name = "userCount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> UserCountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_userCountNotIn.Value; }
            set { _userCountNotIn = new InputPropertyInfo { Name = "userCount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmount.Value; }
            set { _totalAmount = new InputPropertyInfo { Name = "totalAmount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountNot.Value; }
            set { _totalAmountNot = new InputPropertyInfo { Name = "totalAmount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountGt.Value; }
            set { _totalAmountGt = new InputPropertyInfo { Name = "totalAmount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountLt.Value; }
            set { _totalAmountLt = new InputPropertyInfo { Name = "totalAmount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountGte.Value; }
            set { _totalAmountGte = new InputPropertyInfo { Name = "totalAmount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountLte.Value; }
            set { _totalAmountLte = new InputPropertyInfo { Name = "totalAmount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> TotalAmountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_totalAmountIn.Value; }
            set { _totalAmountIn = new InputPropertyInfo { Name = "totalAmount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> TotalAmountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_totalAmountNotIn.Value; }
            set { _totalAmountNotIn = new InputPropertyInfo { Name = "totalAmount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MultiTransferredErc20Filter>>))]
        #endif
        public QueryBuilderParameter<ICollection<MultiTransferredErc20Filter>> And
        {
            get { return (QueryBuilderParameter<ICollection<MultiTransferredErc20Filter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MultiTransferredErc20Filter>>))]
        #endif
        public QueryBuilderParameter<ICollection<MultiTransferredErc20Filter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<MultiTransferredErc20Filter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_token.Name != null) yield return _token;
            if (_tokenNot.Name != null) yield return _tokenNot;
            if (_tokenGt.Name != null) yield return _tokenGt;
            if (_tokenLt.Name != null) yield return _tokenLt;
            if (_tokenGte.Name != null) yield return _tokenGte;
            if (_tokenLte.Name != null) yield return _tokenLte;
            if (_tokenIn.Name != null) yield return _tokenIn;
            if (_tokenNotIn.Name != null) yield return _tokenNotIn;
            if (_tokenContains.Name != null) yield return _tokenContains;
            if (_tokenNotContains.Name != null) yield return _tokenNotContains;
            if (_userCount.Name != null) yield return _userCount;
            if (_userCountNot.Name != null) yield return _userCountNot;
            if (_userCountGt.Name != null) yield return _userCountGt;
            if (_userCountLt.Name != null) yield return _userCountLt;
            if (_userCountGte.Name != null) yield return _userCountGte;
            if (_userCountLte.Name != null) yield return _userCountLte;
            if (_userCountIn.Name != null) yield return _userCountIn;
            if (_userCountNotIn.Name != null) yield return _userCountNotIn;
            if (_totalAmount.Name != null) yield return _totalAmount;
            if (_totalAmountNot.Name != null) yield return _totalAmountNot;
            if (_totalAmountGt.Name != null) yield return _totalAmountGt;
            if (_totalAmountLt.Name != null) yield return _totalAmountLt;
            if (_totalAmountGte.Name != null) yield return _totalAmountGte;
            if (_totalAmountLte.Name != null) yield return _totalAmountLte;
            if (_totalAmountIn.Name != null) yield return _totalAmountIn;
            if (_totalAmountNotIn.Name != null) yield return _totalAmountNotIn;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class MultiTransferredEthFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _userCount;
        private InputPropertyInfo _userCountNot;
        private InputPropertyInfo _userCountGt;
        private InputPropertyInfo _userCountLt;
        private InputPropertyInfo _userCountGte;
        private InputPropertyInfo _userCountLte;
        private InputPropertyInfo _userCountIn;
        private InputPropertyInfo _userCountNotIn;
        private InputPropertyInfo _totalAmount;
        private InputPropertyInfo _totalAmountNot;
        private InputPropertyInfo _totalAmountGt;
        private InputPropertyInfo _totalAmountLt;
        private InputPropertyInfo _totalAmountGte;
        private InputPropertyInfo _totalAmountLte;
        private InputPropertyInfo _totalAmountIn;
        private InputPropertyInfo _totalAmountNotIn;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCount.Value; }
            set { _userCount = new InputPropertyInfo { Name = "userCount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountNot.Value; }
            set { _userCountNot = new InputPropertyInfo { Name = "userCount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountGt.Value; }
            set { _userCountGt = new InputPropertyInfo { Name = "userCount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountLt.Value; }
            set { _userCountLt = new InputPropertyInfo { Name = "userCount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountGte.Value; }
            set { _userCountGte = new InputPropertyInfo { Name = "userCount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> UserCountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_userCountLte.Value; }
            set { _userCountLte = new InputPropertyInfo { Name = "userCount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> UserCountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_userCountIn.Value; }
            set { _userCountIn = new InputPropertyInfo { Name = "userCount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("userCount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> UserCountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_userCountNotIn.Value; }
            set { _userCountNotIn = new InputPropertyInfo { Name = "userCount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmount.Value; }
            set { _totalAmount = new InputPropertyInfo { Name = "totalAmount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountNot.Value; }
            set { _totalAmountNot = new InputPropertyInfo { Name = "totalAmount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountGt.Value; }
            set { _totalAmountGt = new InputPropertyInfo { Name = "totalAmount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountLt.Value; }
            set { _totalAmountLt = new InputPropertyInfo { Name = "totalAmount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountGte.Value; }
            set { _totalAmountGte = new InputPropertyInfo { Name = "totalAmount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> TotalAmountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_totalAmountLte.Value; }
            set { _totalAmountLte = new InputPropertyInfo { Name = "totalAmount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> TotalAmountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_totalAmountIn.Value; }
            set { _totalAmountIn = new InputPropertyInfo { Name = "totalAmount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalAmount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> TotalAmountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_totalAmountNotIn.Value; }
            set { _totalAmountNotIn = new InputPropertyInfo { Name = "totalAmount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MultiTransferredEthFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<MultiTransferredEthFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<MultiTransferredEthFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MultiTransferredEthFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<MultiTransferredEthFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<MultiTransferredEthFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_userCount.Name != null) yield return _userCount;
            if (_userCountNot.Name != null) yield return _userCountNot;
            if (_userCountGt.Name != null) yield return _userCountGt;
            if (_userCountLt.Name != null) yield return _userCountLt;
            if (_userCountGte.Name != null) yield return _userCountGte;
            if (_userCountLte.Name != null) yield return _userCountLte;
            if (_userCountIn.Name != null) yield return _userCountIn;
            if (_userCountNotIn.Name != null) yield return _userCountNotIn;
            if (_totalAmount.Name != null) yield return _totalAmount;
            if (_totalAmountNot.Name != null) yield return _totalAmountNot;
            if (_totalAmountGt.Name != null) yield return _totalAmountGt;
            if (_totalAmountLt.Name != null) yield return _totalAmountLt;
            if (_totalAmountGte.Name != null) yield return _totalAmountGte;
            if (_totalAmountLte.Name != null) yield return _totalAmountLte;
            if (_totalAmountIn.Name != null) yield return _totalAmountIn;
            if (_totalAmountNotIn.Name != null) yield return _totalAmountNotIn;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class NewFeeAmountFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _newFeeAmount;
        private InputPropertyInfo _newFeeAmountNot;
        private InputPropertyInfo _newFeeAmountGt;
        private InputPropertyInfo _newFeeAmountLt;
        private InputPropertyInfo _newFeeAmountGte;
        private InputPropertyInfo _newFeeAmountLte;
        private InputPropertyInfo _newFeeAmountIn;
        private InputPropertyInfo _newFeeAmountNotIn;
        private InputPropertyInfo _oldFeeAmount;
        private InputPropertyInfo _oldFeeAmountNot;
        private InputPropertyInfo _oldFeeAmountGt;
        private InputPropertyInfo _oldFeeAmountLt;
        private InputPropertyInfo _oldFeeAmountGte;
        private InputPropertyInfo _oldFeeAmountLte;
        private InputPropertyInfo _oldFeeAmountIn;
        private InputPropertyInfo _oldFeeAmountNotIn;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> NewFeeAmount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_newFeeAmount.Value; }
            set { _newFeeAmount = new InputPropertyInfo { Name = "NewFeeAmount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeAmount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> NewFeeAmountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_newFeeAmountNot.Value; }
            set { _newFeeAmountNot = new InputPropertyInfo { Name = "NewFeeAmount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeAmount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> NewFeeAmountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_newFeeAmountGt.Value; }
            set { _newFeeAmountGt = new InputPropertyInfo { Name = "NewFeeAmount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeAmount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> NewFeeAmountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_newFeeAmountLt.Value; }
            set { _newFeeAmountLt = new InputPropertyInfo { Name = "NewFeeAmount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeAmount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> NewFeeAmountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_newFeeAmountGte.Value; }
            set { _newFeeAmountGte = new InputPropertyInfo { Name = "NewFeeAmount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeAmount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> NewFeeAmountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_newFeeAmountLte.Value; }
            set { _newFeeAmountLte = new InputPropertyInfo { Name = "NewFeeAmount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeAmount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> NewFeeAmountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_newFeeAmountIn.Value; }
            set { _newFeeAmountIn = new InputPropertyInfo { Name = "NewFeeAmount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeAmount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> NewFeeAmountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_newFeeAmountNotIn.Value; }
            set { _newFeeAmountNotIn = new InputPropertyInfo { Name = "NewFeeAmount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> OldFeeAmount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_oldFeeAmount.Value; }
            set { _oldFeeAmount = new InputPropertyInfo { Name = "OldFeeAmount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeAmount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> OldFeeAmountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_oldFeeAmountNot.Value; }
            set { _oldFeeAmountNot = new InputPropertyInfo { Name = "OldFeeAmount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeAmount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> OldFeeAmountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_oldFeeAmountGt.Value; }
            set { _oldFeeAmountGt = new InputPropertyInfo { Name = "OldFeeAmount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeAmount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> OldFeeAmountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_oldFeeAmountLt.Value; }
            set { _oldFeeAmountLt = new InputPropertyInfo { Name = "OldFeeAmount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeAmount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> OldFeeAmountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_oldFeeAmountGte.Value; }
            set { _oldFeeAmountGte = new InputPropertyInfo { Name = "OldFeeAmount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeAmount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> OldFeeAmountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_oldFeeAmountLte.Value; }
            set { _oldFeeAmountLte = new InputPropertyInfo { Name = "OldFeeAmount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeAmount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> OldFeeAmountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_oldFeeAmountIn.Value; }
            set { _oldFeeAmountIn = new InputPropertyInfo { Name = "OldFeeAmount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeAmount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> OldFeeAmountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_oldFeeAmountNotIn.Value; }
            set { _oldFeeAmountNotIn = new InputPropertyInfo { Name = "OldFeeAmount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<NewFeeAmountFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<NewFeeAmountFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<NewFeeAmountFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<NewFeeAmountFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<NewFeeAmountFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<NewFeeAmountFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_newFeeAmount.Name != null) yield return _newFeeAmount;
            if (_newFeeAmountNot.Name != null) yield return _newFeeAmountNot;
            if (_newFeeAmountGt.Name != null) yield return _newFeeAmountGt;
            if (_newFeeAmountLt.Name != null) yield return _newFeeAmountLt;
            if (_newFeeAmountGte.Name != null) yield return _newFeeAmountGte;
            if (_newFeeAmountLte.Name != null) yield return _newFeeAmountLte;
            if (_newFeeAmountIn.Name != null) yield return _newFeeAmountIn;
            if (_newFeeAmountNotIn.Name != null) yield return _newFeeAmountNotIn;
            if (_oldFeeAmount.Name != null) yield return _oldFeeAmount;
            if (_oldFeeAmountNot.Name != null) yield return _oldFeeAmountNot;
            if (_oldFeeAmountGt.Name != null) yield return _oldFeeAmountGt;
            if (_oldFeeAmountLt.Name != null) yield return _oldFeeAmountLt;
            if (_oldFeeAmountGte.Name != null) yield return _oldFeeAmountGte;
            if (_oldFeeAmountLte.Name != null) yield return _oldFeeAmountLte;
            if (_oldFeeAmountIn.Name != null) yield return _oldFeeAmountIn;
            if (_oldFeeAmountNotIn.Name != null) yield return _oldFeeAmountNotIn;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class NewFeeTokenFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _newFeeToken;
        private InputPropertyInfo _newFeeTokenNot;
        private InputPropertyInfo _newFeeTokenGt;
        private InputPropertyInfo _newFeeTokenLt;
        private InputPropertyInfo _newFeeTokenGte;
        private InputPropertyInfo _newFeeTokenLte;
        private InputPropertyInfo _newFeeTokenIn;
        private InputPropertyInfo _newFeeTokenNotIn;
        private InputPropertyInfo _newFeeTokenContains;
        private InputPropertyInfo _newFeeTokenNotContains;
        private InputPropertyInfo _oldFeeToken;
        private InputPropertyInfo _oldFeeTokenNot;
        private InputPropertyInfo _oldFeeTokenGt;
        private InputPropertyInfo _oldFeeTokenLt;
        private InputPropertyInfo _oldFeeTokenGte;
        private InputPropertyInfo _oldFeeTokenLte;
        private InputPropertyInfo _oldFeeTokenIn;
        private InputPropertyInfo _oldFeeTokenNotIn;
        private InputPropertyInfo _oldFeeTokenContains;
        private InputPropertyInfo _oldFeeTokenNotContains;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewFeeToken
        {
            get { return (QueryBuilderParameter<string>)_newFeeToken.Value; }
            set { _newFeeToken = new InputPropertyInfo { Name = "NewFeeToken", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewFeeTokenNot
        {
            get { return (QueryBuilderParameter<string>)_newFeeTokenNot.Value; }
            set { _newFeeTokenNot = new InputPropertyInfo { Name = "NewFeeToken_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewFeeTokenGt
        {
            get { return (QueryBuilderParameter<string>)_newFeeTokenGt.Value; }
            set { _newFeeTokenGt = new InputPropertyInfo { Name = "NewFeeToken_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewFeeTokenLt
        {
            get { return (QueryBuilderParameter<string>)_newFeeTokenLt.Value; }
            set { _newFeeTokenLt = new InputPropertyInfo { Name = "NewFeeToken_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewFeeTokenGte
        {
            get { return (QueryBuilderParameter<string>)_newFeeTokenGte.Value; }
            set { _newFeeTokenGte = new InputPropertyInfo { Name = "NewFeeToken_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewFeeTokenLte
        {
            get { return (QueryBuilderParameter<string>)_newFeeTokenLte.Value; }
            set { _newFeeTokenLte = new InputPropertyInfo { Name = "NewFeeToken_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NewFeeTokenIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_newFeeTokenIn.Value; }
            set { _newFeeTokenIn = new InputPropertyInfo { Name = "NewFeeToken_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NewFeeTokenNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_newFeeTokenNotIn.Value; }
            set { _newFeeTokenNotIn = new InputPropertyInfo { Name = "NewFeeToken_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewFeeTokenContains
        {
            get { return (QueryBuilderParameter<string>)_newFeeTokenContains.Value; }
            set { _newFeeTokenContains = new InputPropertyInfo { Name = "NewFeeToken_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("NewFeeToken_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewFeeTokenNotContains
        {
            get { return (QueryBuilderParameter<string>)_newFeeTokenNotContains.Value; }
            set { _newFeeTokenNotContains = new InputPropertyInfo { Name = "NewFeeToken_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldFeeToken
        {
            get { return (QueryBuilderParameter<string>)_oldFeeToken.Value; }
            set { _oldFeeToken = new InputPropertyInfo { Name = "OldFeeToken", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldFeeTokenNot
        {
            get { return (QueryBuilderParameter<string>)_oldFeeTokenNot.Value; }
            set { _oldFeeTokenNot = new InputPropertyInfo { Name = "OldFeeToken_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldFeeTokenGt
        {
            get { return (QueryBuilderParameter<string>)_oldFeeTokenGt.Value; }
            set { _oldFeeTokenGt = new InputPropertyInfo { Name = "OldFeeToken_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldFeeTokenLt
        {
            get { return (QueryBuilderParameter<string>)_oldFeeTokenLt.Value; }
            set { _oldFeeTokenLt = new InputPropertyInfo { Name = "OldFeeToken_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldFeeTokenGte
        {
            get { return (QueryBuilderParameter<string>)_oldFeeTokenGte.Value; }
            set { _oldFeeTokenGte = new InputPropertyInfo { Name = "OldFeeToken_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldFeeTokenLte
        {
            get { return (QueryBuilderParameter<string>)_oldFeeTokenLte.Value; }
            set { _oldFeeTokenLte = new InputPropertyInfo { Name = "OldFeeToken_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> OldFeeTokenIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_oldFeeTokenIn.Value; }
            set { _oldFeeTokenIn = new InputPropertyInfo { Name = "OldFeeToken_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> OldFeeTokenNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_oldFeeTokenNotIn.Value; }
            set { _oldFeeTokenNotIn = new InputPropertyInfo { Name = "OldFeeToken_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldFeeTokenContains
        {
            get { return (QueryBuilderParameter<string>)_oldFeeTokenContains.Value; }
            set { _oldFeeTokenContains = new InputPropertyInfo { Name = "OldFeeToken_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OldFeeToken_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> OldFeeTokenNotContains
        {
            get { return (QueryBuilderParameter<string>)_oldFeeTokenNotContains.Value; }
            set { _oldFeeTokenNotContains = new InputPropertyInfo { Name = "OldFeeToken_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<NewFeeTokenFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<NewFeeTokenFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<NewFeeTokenFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<NewFeeTokenFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<NewFeeTokenFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<NewFeeTokenFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_newFeeToken.Name != null) yield return _newFeeToken;
            if (_newFeeTokenNot.Name != null) yield return _newFeeTokenNot;
            if (_newFeeTokenGt.Name != null) yield return _newFeeTokenGt;
            if (_newFeeTokenLt.Name != null) yield return _newFeeTokenLt;
            if (_newFeeTokenGte.Name != null) yield return _newFeeTokenGte;
            if (_newFeeTokenLte.Name != null) yield return _newFeeTokenLte;
            if (_newFeeTokenIn.Name != null) yield return _newFeeTokenIn;
            if (_newFeeTokenNotIn.Name != null) yield return _newFeeTokenNotIn;
            if (_newFeeTokenContains.Name != null) yield return _newFeeTokenContains;
            if (_newFeeTokenNotContains.Name != null) yield return _newFeeTokenNotContains;
            if (_oldFeeToken.Name != null) yield return _oldFeeToken;
            if (_oldFeeTokenNot.Name != null) yield return _oldFeeTokenNot;
            if (_oldFeeTokenGt.Name != null) yield return _oldFeeTokenGt;
            if (_oldFeeTokenLt.Name != null) yield return _oldFeeTokenLt;
            if (_oldFeeTokenGte.Name != null) yield return _oldFeeTokenGte;
            if (_oldFeeTokenLte.Name != null) yield return _oldFeeTokenLte;
            if (_oldFeeTokenIn.Name != null) yield return _oldFeeTokenIn;
            if (_oldFeeTokenNotIn.Name != null) yield return _oldFeeTokenNotIn;
            if (_oldFeeTokenContains.Name != null) yield return _oldFeeTokenContains;
            if (_oldFeeTokenNotContains.Name != null) yield return _oldFeeTokenNotContains;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class OwnershipTransferredFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _previousOwner;
        private InputPropertyInfo _previousOwnerNot;
        private InputPropertyInfo _previousOwnerGt;
        private InputPropertyInfo _previousOwnerLt;
        private InputPropertyInfo _previousOwnerGte;
        private InputPropertyInfo _previousOwnerLte;
        private InputPropertyInfo _previousOwnerIn;
        private InputPropertyInfo _previousOwnerNotIn;
        private InputPropertyInfo _previousOwnerContains;
        private InputPropertyInfo _previousOwnerNotContains;
        private InputPropertyInfo _newOwner;
        private InputPropertyInfo _newOwnerNot;
        private InputPropertyInfo _newOwnerGt;
        private InputPropertyInfo _newOwnerLt;
        private InputPropertyInfo _newOwnerGte;
        private InputPropertyInfo _newOwnerLte;
        private InputPropertyInfo _newOwnerIn;
        private InputPropertyInfo _newOwnerNotIn;
        private InputPropertyInfo _newOwnerContains;
        private InputPropertyInfo _newOwnerNotContains;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PreviousOwner
        {
            get { return (QueryBuilderParameter<string>)_previousOwner.Value; }
            set { _previousOwner = new InputPropertyInfo { Name = "previousOwner", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PreviousOwnerNot
        {
            get { return (QueryBuilderParameter<string>)_previousOwnerNot.Value; }
            set { _previousOwnerNot = new InputPropertyInfo { Name = "previousOwner_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PreviousOwnerGt
        {
            get { return (QueryBuilderParameter<string>)_previousOwnerGt.Value; }
            set { _previousOwnerGt = new InputPropertyInfo { Name = "previousOwner_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PreviousOwnerLt
        {
            get { return (QueryBuilderParameter<string>)_previousOwnerLt.Value; }
            set { _previousOwnerLt = new InputPropertyInfo { Name = "previousOwner_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PreviousOwnerGte
        {
            get { return (QueryBuilderParameter<string>)_previousOwnerGte.Value; }
            set { _previousOwnerGte = new InputPropertyInfo { Name = "previousOwner_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PreviousOwnerLte
        {
            get { return (QueryBuilderParameter<string>)_previousOwnerLte.Value; }
            set { _previousOwnerLte = new InputPropertyInfo { Name = "previousOwner_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> PreviousOwnerIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_previousOwnerIn.Value; }
            set { _previousOwnerIn = new InputPropertyInfo { Name = "previousOwner_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> PreviousOwnerNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_previousOwnerNotIn.Value; }
            set { _previousOwnerNotIn = new InputPropertyInfo { Name = "previousOwner_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PreviousOwnerContains
        {
            get { return (QueryBuilderParameter<string>)_previousOwnerContains.Value; }
            set { _previousOwnerContains = new InputPropertyInfo { Name = "previousOwner_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("previousOwner_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PreviousOwnerNotContains
        {
            get { return (QueryBuilderParameter<string>)_previousOwnerNotContains.Value; }
            set { _previousOwnerNotContains = new InputPropertyInfo { Name = "previousOwner_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewOwner
        {
            get { return (QueryBuilderParameter<string>)_newOwner.Value; }
            set { _newOwner = new InputPropertyInfo { Name = "newOwner", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewOwnerNot
        {
            get { return (QueryBuilderParameter<string>)_newOwnerNot.Value; }
            set { _newOwnerNot = new InputPropertyInfo { Name = "newOwner_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewOwnerGt
        {
            get { return (QueryBuilderParameter<string>)_newOwnerGt.Value; }
            set { _newOwnerGt = new InputPropertyInfo { Name = "newOwner_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewOwnerLt
        {
            get { return (QueryBuilderParameter<string>)_newOwnerLt.Value; }
            set { _newOwnerLt = new InputPropertyInfo { Name = "newOwner_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewOwnerGte
        {
            get { return (QueryBuilderParameter<string>)_newOwnerGte.Value; }
            set { _newOwnerGte = new InputPropertyInfo { Name = "newOwner_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewOwnerLte
        {
            get { return (QueryBuilderParameter<string>)_newOwnerLte.Value; }
            set { _newOwnerLte = new InputPropertyInfo { Name = "newOwner_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NewOwnerIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_newOwnerIn.Value; }
            set { _newOwnerIn = new InputPropertyInfo { Name = "newOwner_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NewOwnerNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_newOwnerNotIn.Value; }
            set { _newOwnerNotIn = new InputPropertyInfo { Name = "newOwner_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewOwnerContains
        {
            get { return (QueryBuilderParameter<string>)_newOwnerContains.Value; }
            set { _newOwnerContains = new InputPropertyInfo { Name = "newOwner_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("newOwner_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NewOwnerNotContains
        {
            get { return (QueryBuilderParameter<string>)_newOwnerNotContains.Value; }
            set { _newOwnerNotContains = new InputPropertyInfo { Name = "newOwner_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OwnershipTransferredFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<OwnershipTransferredFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<OwnershipTransferredFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OwnershipTransferredFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<OwnershipTransferredFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<OwnershipTransferredFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_previousOwner.Name != null) yield return _previousOwner;
            if (_previousOwnerNot.Name != null) yield return _previousOwnerNot;
            if (_previousOwnerGt.Name != null) yield return _previousOwnerGt;
            if (_previousOwnerLt.Name != null) yield return _previousOwnerLt;
            if (_previousOwnerGte.Name != null) yield return _previousOwnerGte;
            if (_previousOwnerLte.Name != null) yield return _previousOwnerLte;
            if (_previousOwnerIn.Name != null) yield return _previousOwnerIn;
            if (_previousOwnerNotIn.Name != null) yield return _previousOwnerNotIn;
            if (_previousOwnerContains.Name != null) yield return _previousOwnerContains;
            if (_previousOwnerNotContains.Name != null) yield return _previousOwnerNotContains;
            if (_newOwner.Name != null) yield return _newOwner;
            if (_newOwnerNot.Name != null) yield return _newOwnerNot;
            if (_newOwnerGt.Name != null) yield return _newOwnerGt;
            if (_newOwnerLt.Name != null) yield return _newOwnerLt;
            if (_newOwnerGte.Name != null) yield return _newOwnerGte;
            if (_newOwnerLte.Name != null) yield return _newOwnerLte;
            if (_newOwnerIn.Name != null) yield return _newOwnerIn;
            if (_newOwnerNotIn.Name != null) yield return _newOwnerNotIn;
            if (_newOwnerContains.Name != null) yield return _newOwnerContains;
            if (_newOwnerNotContains.Name != null) yield return _newOwnerNotContains;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class PausedFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _account;
        private InputPropertyInfo _accountNot;
        private InputPropertyInfo _accountGt;
        private InputPropertyInfo _accountLt;
        private InputPropertyInfo _accountGte;
        private InputPropertyInfo _accountLte;
        private InputPropertyInfo _accountIn;
        private InputPropertyInfo _accountNotIn;
        private InputPropertyInfo _accountContains;
        private InputPropertyInfo _accountNotContains;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Account
        {
            get { return (QueryBuilderParameter<string>)_account.Value; }
            set { _account = new InputPropertyInfo { Name = "account", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountNot
        {
            get { return (QueryBuilderParameter<string>)_accountNot.Value; }
            set { _accountNot = new InputPropertyInfo { Name = "account_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountGt
        {
            get { return (QueryBuilderParameter<string>)_accountGt.Value; }
            set { _accountGt = new InputPropertyInfo { Name = "account_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountLt
        {
            get { return (QueryBuilderParameter<string>)_accountLt.Value; }
            set { _accountLt = new InputPropertyInfo { Name = "account_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountGte
        {
            get { return (QueryBuilderParameter<string>)_accountGte.Value; }
            set { _accountGte = new InputPropertyInfo { Name = "account_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountLte
        {
            get { return (QueryBuilderParameter<string>)_accountLte.Value; }
            set { _accountLte = new InputPropertyInfo { Name = "account_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> AccountIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_accountIn.Value; }
            set { _accountIn = new InputPropertyInfo { Name = "account_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> AccountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_accountNotIn.Value; }
            set { _accountNotIn = new InputPropertyInfo { Name = "account_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountContains
        {
            get { return (QueryBuilderParameter<string>)_accountContains.Value; }
            set { _accountContains = new InputPropertyInfo { Name = "account_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountNotContains
        {
            get { return (QueryBuilderParameter<string>)_accountNotContains.Value; }
            set { _accountNotContains = new InputPropertyInfo { Name = "account_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PausedFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<PausedFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<PausedFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PausedFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<PausedFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PausedFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_account.Name != null) yield return _account;
            if (_accountNot.Name != null) yield return _accountNot;
            if (_accountGt.Name != null) yield return _accountGt;
            if (_accountLt.Name != null) yield return _accountLt;
            if (_accountGte.Name != null) yield return _accountGte;
            if (_accountLte.Name != null) yield return _accountLte;
            if (_accountIn.Name != null) yield return _accountIn;
            if (_accountNotIn.Name != null) yield return _accountNotIn;
            if (_accountContains.Name != null) yield return _accountContains;
            if (_accountNotContains.Name != null) yield return _accountNotContains;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class TransferInEthFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _amount;
        private InputPropertyInfo _amountNot;
        private InputPropertyInfo _amountGt;
        private InputPropertyInfo _amountLt;
        private InputPropertyInfo _amountGte;
        private InputPropertyInfo _amountLte;
        private InputPropertyInfo _amountIn;
        private InputPropertyInfo _amountNotIn;
        private InputPropertyInfo _from;
        private InputPropertyInfo _fromNot;
        private InputPropertyInfo _fromGt;
        private InputPropertyInfo _fromLt;
        private InputPropertyInfo _fromGte;
        private InputPropertyInfo _fromLte;
        private InputPropertyInfo _fromIn;
        private InputPropertyInfo _fromNotIn;
        private InputPropertyInfo _fromContains;
        private InputPropertyInfo _fromNotContains;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> Amount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountNot.Value; }
            set { _amountNot = new InputPropertyInfo { Name = "Amount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountGt.Value; }
            set { _amountGt = new InputPropertyInfo { Name = "Amount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountLt.Value; }
            set { _amountLt = new InputPropertyInfo { Name = "Amount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountGte.Value; }
            set { _amountGte = new InputPropertyInfo { Name = "Amount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountLte.Value; }
            set { _amountLte = new InputPropertyInfo { Name = "Amount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> AmountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_amountIn.Value; }
            set { _amountIn = new InputPropertyInfo { Name = "Amount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> AmountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_amountNotIn.Value; }
            set { _amountNotIn = new InputPropertyInfo { Name = "Amount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> From
        {
            get { return (QueryBuilderParameter<string>)_from.Value; }
            set { _from = new InputPropertyInfo { Name = "From", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromNot
        {
            get { return (QueryBuilderParameter<string>)_fromNot.Value; }
            set { _fromNot = new InputPropertyInfo { Name = "From_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromGt
        {
            get { return (QueryBuilderParameter<string>)_fromGt.Value; }
            set { _fromGt = new InputPropertyInfo { Name = "From_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromLt
        {
            get { return (QueryBuilderParameter<string>)_fromLt.Value; }
            set { _fromLt = new InputPropertyInfo { Name = "From_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromGte
        {
            get { return (QueryBuilderParameter<string>)_fromGte.Value; }
            set { _fromGte = new InputPropertyInfo { Name = "From_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromLte
        {
            get { return (QueryBuilderParameter<string>)_fromLte.Value; }
            set { _fromLte = new InputPropertyInfo { Name = "From_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> FromIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_fromIn.Value; }
            set { _fromIn = new InputPropertyInfo { Name = "From_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> FromNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_fromNotIn.Value; }
            set { _fromNotIn = new InputPropertyInfo { Name = "From_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromContains
        {
            get { return (QueryBuilderParameter<string>)_fromContains.Value; }
            set { _fromContains = new InputPropertyInfo { Name = "From_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromNotContains
        {
            get { return (QueryBuilderParameter<string>)_fromNotContains.Value; }
            set { _fromNotContains = new InputPropertyInfo { Name = "From_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TransferInEthFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<TransferInEthFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<TransferInEthFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TransferInEthFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<TransferInEthFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<TransferInEthFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_amount.Name != null) yield return _amount;
            if (_amountNot.Name != null) yield return _amountNot;
            if (_amountGt.Name != null) yield return _amountGt;
            if (_amountLt.Name != null) yield return _amountLt;
            if (_amountGte.Name != null) yield return _amountGte;
            if (_amountLte.Name != null) yield return _amountLte;
            if (_amountIn.Name != null) yield return _amountIn;
            if (_amountNotIn.Name != null) yield return _amountNotIn;
            if (_from.Name != null) yield return _from;
            if (_fromNot.Name != null) yield return _fromNot;
            if (_fromGt.Name != null) yield return _fromGt;
            if (_fromLt.Name != null) yield return _fromLt;
            if (_fromGte.Name != null) yield return _fromGte;
            if (_fromLte.Name != null) yield return _fromLte;
            if (_fromIn.Name != null) yield return _fromIn;
            if (_fromNotIn.Name != null) yield return _fromNotIn;
            if (_fromContains.Name != null) yield return _fromContains;
            if (_fromNotContains.Name != null) yield return _fromNotContains;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class TransferInFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _amount;
        private InputPropertyInfo _amountNot;
        private InputPropertyInfo _amountGt;
        private InputPropertyInfo _amountLt;
        private InputPropertyInfo _amountGte;
        private InputPropertyInfo _amountLte;
        private InputPropertyInfo _amountIn;
        private InputPropertyInfo _amountNotIn;
        private InputPropertyInfo _from;
        private InputPropertyInfo _fromNot;
        private InputPropertyInfo _fromGt;
        private InputPropertyInfo _fromLt;
        private InputPropertyInfo _fromGte;
        private InputPropertyInfo _fromLte;
        private InputPropertyInfo _fromIn;
        private InputPropertyInfo _fromNotIn;
        private InputPropertyInfo _fromContains;
        private InputPropertyInfo _fromNotContains;
        private InputPropertyInfo _token;
        private InputPropertyInfo _tokenNot;
        private InputPropertyInfo _tokenGt;
        private InputPropertyInfo _tokenLt;
        private InputPropertyInfo _tokenGte;
        private InputPropertyInfo _tokenLte;
        private InputPropertyInfo _tokenIn;
        private InputPropertyInfo _tokenNotIn;
        private InputPropertyInfo _tokenContains;
        private InputPropertyInfo _tokenNotContains;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> Amount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountNot.Value; }
            set { _amountNot = new InputPropertyInfo { Name = "Amount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountGt.Value; }
            set { _amountGt = new InputPropertyInfo { Name = "Amount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountLt.Value; }
            set { _amountLt = new InputPropertyInfo { Name = "Amount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountGte.Value; }
            set { _amountGte = new InputPropertyInfo { Name = "Amount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountLte.Value; }
            set { _amountLte = new InputPropertyInfo { Name = "Amount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> AmountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_amountIn.Value; }
            set { _amountIn = new InputPropertyInfo { Name = "Amount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> AmountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_amountNotIn.Value; }
            set { _amountNotIn = new InputPropertyInfo { Name = "Amount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> From
        {
            get { return (QueryBuilderParameter<string>)_from.Value; }
            set { _from = new InputPropertyInfo { Name = "From", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromNot
        {
            get { return (QueryBuilderParameter<string>)_fromNot.Value; }
            set { _fromNot = new InputPropertyInfo { Name = "From_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromGt
        {
            get { return (QueryBuilderParameter<string>)_fromGt.Value; }
            set { _fromGt = new InputPropertyInfo { Name = "From_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromLt
        {
            get { return (QueryBuilderParameter<string>)_fromLt.Value; }
            set { _fromLt = new InputPropertyInfo { Name = "From_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromGte
        {
            get { return (QueryBuilderParameter<string>)_fromGte.Value; }
            set { _fromGte = new InputPropertyInfo { Name = "From_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromLte
        {
            get { return (QueryBuilderParameter<string>)_fromLte.Value; }
            set { _fromLte = new InputPropertyInfo { Name = "From_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> FromIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_fromIn.Value; }
            set { _fromIn = new InputPropertyInfo { Name = "From_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> FromNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_fromNotIn.Value; }
            set { _fromNotIn = new InputPropertyInfo { Name = "From_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromContains
        {
            get { return (QueryBuilderParameter<string>)_fromContains.Value; }
            set { _fromContains = new InputPropertyInfo { Name = "From_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("From_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FromNotContains
        {
            get { return (QueryBuilderParameter<string>)_fromNotContains.Value; }
            set { _fromNotContains = new InputPropertyInfo { Name = "From_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Token
        {
            get { return (QueryBuilderParameter<string>)_token.Value; }
            set { _token = new InputPropertyInfo { Name = "Token", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenNot
        {
            get { return (QueryBuilderParameter<string>)_tokenNot.Value; }
            set { _tokenNot = new InputPropertyInfo { Name = "Token_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenGt
        {
            get { return (QueryBuilderParameter<string>)_tokenGt.Value; }
            set { _tokenGt = new InputPropertyInfo { Name = "Token_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenLt
        {
            get { return (QueryBuilderParameter<string>)_tokenLt.Value; }
            set { _tokenLt = new InputPropertyInfo { Name = "Token_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenGte
        {
            get { return (QueryBuilderParameter<string>)_tokenGte.Value; }
            set { _tokenGte = new InputPropertyInfo { Name = "Token_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenLte
        {
            get { return (QueryBuilderParameter<string>)_tokenLte.Value; }
            set { _tokenLte = new InputPropertyInfo { Name = "Token_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TokenIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_tokenIn.Value; }
            set { _tokenIn = new InputPropertyInfo { Name = "Token_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TokenNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_tokenNotIn.Value; }
            set { _tokenNotIn = new InputPropertyInfo { Name = "Token_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenContains
        {
            get { return (QueryBuilderParameter<string>)_tokenContains.Value; }
            set { _tokenContains = new InputPropertyInfo { Name = "Token_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenNotContains
        {
            get { return (QueryBuilderParameter<string>)_tokenNotContains.Value; }
            set { _tokenNotContains = new InputPropertyInfo { Name = "Token_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TransferInFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<TransferInFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<TransferInFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TransferInFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<TransferInFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<TransferInFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_amount.Name != null) yield return _amount;
            if (_amountNot.Name != null) yield return _amountNot;
            if (_amountGt.Name != null) yield return _amountGt;
            if (_amountLt.Name != null) yield return _amountLt;
            if (_amountGte.Name != null) yield return _amountGte;
            if (_amountLte.Name != null) yield return _amountLte;
            if (_amountIn.Name != null) yield return _amountIn;
            if (_amountNotIn.Name != null) yield return _amountNotIn;
            if (_from.Name != null) yield return _from;
            if (_fromNot.Name != null) yield return _fromNot;
            if (_fromGt.Name != null) yield return _fromGt;
            if (_fromLt.Name != null) yield return _fromLt;
            if (_fromGte.Name != null) yield return _fromGte;
            if (_fromLte.Name != null) yield return _fromLte;
            if (_fromIn.Name != null) yield return _fromIn;
            if (_fromNotIn.Name != null) yield return _fromNotIn;
            if (_fromContains.Name != null) yield return _fromContains;
            if (_fromNotContains.Name != null) yield return _fromNotContains;
            if (_token.Name != null) yield return _token;
            if (_tokenNot.Name != null) yield return _tokenNot;
            if (_tokenGt.Name != null) yield return _tokenGt;
            if (_tokenLt.Name != null) yield return _tokenLt;
            if (_tokenGte.Name != null) yield return _tokenGte;
            if (_tokenLte.Name != null) yield return _tokenLte;
            if (_tokenIn.Name != null) yield return _tokenIn;
            if (_tokenNotIn.Name != null) yield return _tokenNotIn;
            if (_tokenContains.Name != null) yield return _tokenContains;
            if (_tokenNotContains.Name != null) yield return _tokenNotContains;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class TransferOutFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _amount;
        private InputPropertyInfo _amountNot;
        private InputPropertyInfo _amountGt;
        private InputPropertyInfo _amountLt;
        private InputPropertyInfo _amountGte;
        private InputPropertyInfo _amountLte;
        private InputPropertyInfo _amountIn;
        private InputPropertyInfo _amountNotIn;
        private InputPropertyInfo _to;
        private InputPropertyInfo _toNot;
        private InputPropertyInfo _toGt;
        private InputPropertyInfo _toLt;
        private InputPropertyInfo _toGte;
        private InputPropertyInfo _toLte;
        private InputPropertyInfo _toIn;
        private InputPropertyInfo _toNotIn;
        private InputPropertyInfo _toContains;
        private InputPropertyInfo _toNotContains;
        private InputPropertyInfo _token;
        private InputPropertyInfo _tokenNot;
        private InputPropertyInfo _tokenGt;
        private InputPropertyInfo _tokenLt;
        private InputPropertyInfo _tokenGte;
        private InputPropertyInfo _tokenLte;
        private InputPropertyInfo _tokenIn;
        private InputPropertyInfo _tokenNotIn;
        private InputPropertyInfo _tokenContains;
        private InputPropertyInfo _tokenNotContains;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> Amount
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountNot.Value; }
            set { _amountNot = new InputPropertyInfo { Name = "Amount_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountGt.Value; }
            set { _amountGt = new InputPropertyInfo { Name = "Amount_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountLt.Value; }
            set { _amountLt = new InputPropertyInfo { Name = "Amount_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountGte.Value; }
            set { _amountGte = new InputPropertyInfo { Name = "Amount_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> AmountLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_amountLte.Value; }
            set { _amountLte = new InputPropertyInfo { Name = "Amount_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> AmountIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_amountIn.Value; }
            set { _amountIn = new InputPropertyInfo { Name = "Amount_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Amount_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> AmountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_amountNotIn.Value; }
            set { _amountNotIn = new InputPropertyInfo { Name = "Amount_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> To
        {
            get { return (QueryBuilderParameter<string>)_to.Value; }
            set { _to = new InputPropertyInfo { Name = "To", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ToNot
        {
            get { return (QueryBuilderParameter<string>)_toNot.Value; }
            set { _toNot = new InputPropertyInfo { Name = "To_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ToGt
        {
            get { return (QueryBuilderParameter<string>)_toGt.Value; }
            set { _toGt = new InputPropertyInfo { Name = "To_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ToLt
        {
            get { return (QueryBuilderParameter<string>)_toLt.Value; }
            set { _toLt = new InputPropertyInfo { Name = "To_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ToGte
        {
            get { return (QueryBuilderParameter<string>)_toGte.Value; }
            set { _toGte = new InputPropertyInfo { Name = "To_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ToLte
        {
            get { return (QueryBuilderParameter<string>)_toLte.Value; }
            set { _toLte = new InputPropertyInfo { Name = "To_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> ToIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_toIn.Value; }
            set { _toIn = new InputPropertyInfo { Name = "To_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> ToNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_toNotIn.Value; }
            set { _toNotIn = new InputPropertyInfo { Name = "To_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ToContains
        {
            get { return (QueryBuilderParameter<string>)_toContains.Value; }
            set { _toContains = new InputPropertyInfo { Name = "To_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("To_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ToNotContains
        {
            get { return (QueryBuilderParameter<string>)_toNotContains.Value; }
            set { _toNotContains = new InputPropertyInfo { Name = "To_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Token
        {
            get { return (QueryBuilderParameter<string>)_token.Value; }
            set { _token = new InputPropertyInfo { Name = "Token", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenNot
        {
            get { return (QueryBuilderParameter<string>)_tokenNot.Value; }
            set { _tokenNot = new InputPropertyInfo { Name = "Token_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenGt
        {
            get { return (QueryBuilderParameter<string>)_tokenGt.Value; }
            set { _tokenGt = new InputPropertyInfo { Name = "Token_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenLt
        {
            get { return (QueryBuilderParameter<string>)_tokenLt.Value; }
            set { _tokenLt = new InputPropertyInfo { Name = "Token_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenGte
        {
            get { return (QueryBuilderParameter<string>)_tokenGte.Value; }
            set { _tokenGte = new InputPropertyInfo { Name = "Token_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenLte
        {
            get { return (QueryBuilderParameter<string>)_tokenLte.Value; }
            set { _tokenLte = new InputPropertyInfo { Name = "Token_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TokenIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_tokenIn.Value; }
            set { _tokenIn = new InputPropertyInfo { Name = "Token_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TokenNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_tokenNotIn.Value; }
            set { _tokenNotIn = new InputPropertyInfo { Name = "Token_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenContains
        {
            get { return (QueryBuilderParameter<string>)_tokenContains.Value; }
            set { _tokenContains = new InputPropertyInfo { Name = "Token_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Token_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenNotContains
        {
            get { return (QueryBuilderParameter<string>)_tokenNotContains.Value; }
            set { _tokenNotContains = new InputPropertyInfo { Name = "Token_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TransferOutFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<TransferOutFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<TransferOutFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TransferOutFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<TransferOutFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<TransferOutFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_amount.Name != null) yield return _amount;
            if (_amountNot.Name != null) yield return _amountNot;
            if (_amountGt.Name != null) yield return _amountGt;
            if (_amountLt.Name != null) yield return _amountLt;
            if (_amountGte.Name != null) yield return _amountGte;
            if (_amountLte.Name != null) yield return _amountLte;
            if (_amountIn.Name != null) yield return _amountIn;
            if (_amountNotIn.Name != null) yield return _amountNotIn;
            if (_to.Name != null) yield return _to;
            if (_toNot.Name != null) yield return _toNot;
            if (_toGt.Name != null) yield return _toGt;
            if (_toLt.Name != null) yield return _toLt;
            if (_toGte.Name != null) yield return _toGte;
            if (_toLte.Name != null) yield return _toLte;
            if (_toIn.Name != null) yield return _toIn;
            if (_toNotIn.Name != null) yield return _toNotIn;
            if (_toContains.Name != null) yield return _toContains;
            if (_toNotContains.Name != null) yield return _toNotContains;
            if (_token.Name != null) yield return _token;
            if (_tokenNot.Name != null) yield return _tokenNot;
            if (_tokenGt.Name != null) yield return _tokenGt;
            if (_tokenLt.Name != null) yield return _tokenLt;
            if (_tokenGte.Name != null) yield return _tokenGte;
            if (_tokenLte.Name != null) yield return _tokenLte;
            if (_tokenIn.Name != null) yield return _tokenIn;
            if (_tokenNotIn.Name != null) yield return _tokenNotIn;
            if (_tokenContains.Name != null) yield return _tokenContains;
            if (_tokenNotContains.Name != null) yield return _tokenNotContains;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }

    public partial class UnpausedFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _idNot;
        private InputPropertyInfo _idGt;
        private InputPropertyInfo _idLt;
        private InputPropertyInfo _idGte;
        private InputPropertyInfo _idLte;
        private InputPropertyInfo _idIn;
        private InputPropertyInfo _idNotIn;
        private InputPropertyInfo _idContains;
        private InputPropertyInfo _idNotContains;
        private InputPropertyInfo _account;
        private InputPropertyInfo _accountNot;
        private InputPropertyInfo _accountGt;
        private InputPropertyInfo _accountLt;
        private InputPropertyInfo _accountGte;
        private InputPropertyInfo _accountLte;
        private InputPropertyInfo _accountIn;
        private InputPropertyInfo _accountNotIn;
        private InputPropertyInfo _accountContains;
        private InputPropertyInfo _accountNotContains;
        private InputPropertyInfo _blockNumber;
        private InputPropertyInfo _blockNumberNot;
        private InputPropertyInfo _blockNumberGt;
        private InputPropertyInfo _blockNumberLt;
        private InputPropertyInfo _blockNumberGte;
        private InputPropertyInfo _blockNumberLte;
        private InputPropertyInfo _blockNumberIn;
        private InputPropertyInfo _blockNumberNotIn;
        private InputPropertyInfo _blockTimestamp;
        private InputPropertyInfo _blockTimestampNot;
        private InputPropertyInfo _blockTimestampGt;
        private InputPropertyInfo _blockTimestampLt;
        private InputPropertyInfo _blockTimestampGte;
        private InputPropertyInfo _blockTimestampLte;
        private InputPropertyInfo _blockTimestampIn;
        private InputPropertyInfo _blockTimestampNotIn;
        private InputPropertyInfo _transactionHash;
        private InputPropertyInfo _transactionHashNot;
        private InputPropertyInfo _transactionHashGt;
        private InputPropertyInfo _transactionHashLt;
        private InputPropertyInfo _transactionHashGte;
        private InputPropertyInfo _transactionHashLte;
        private InputPropertyInfo _transactionHashIn;
        private InputPropertyInfo _transactionHashNotIn;
        private InputPropertyInfo _transactionHashContains;
        private InputPropertyInfo _transactionHashNotContains;
        private InputPropertyInfo _changeBlock;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNot
        {
            get { return (QueryBuilderParameter<string>)_idNot.Value; }
            set { _idNot = new InputPropertyInfo { Name = "id_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGt
        {
            get { return (QueryBuilderParameter<string>)_idGt.Value; }
            set { _idGt = new InputPropertyInfo { Name = "id_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLt
        {
            get { return (QueryBuilderParameter<string>)_idLt.Value; }
            set { _idLt = new InputPropertyInfo { Name = "id_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdGte
        {
            get { return (QueryBuilderParameter<string>)_idGte.Value; }
            set { _idGte = new InputPropertyInfo { Name = "id_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdLte
        {
            get { return (QueryBuilderParameter<string>)_idLte.Value; }
            set { _idLte = new InputPropertyInfo { Name = "id_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idIn.Value; }
            set { _idIn = new InputPropertyInfo { Name = "id_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> IdNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_idNotIn.Value; }
            set { _idNotIn = new InputPropertyInfo { Name = "id_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdContains
        {
            get { return (QueryBuilderParameter<string>)_idContains.Value; }
            set { _idContains = new InputPropertyInfo { Name = "id_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdNotContains
        {
            get { return (QueryBuilderParameter<string>)_idNotContains.Value; }
            set { _idNotContains = new InputPropertyInfo { Name = "id_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Account
        {
            get { return (QueryBuilderParameter<string>)_account.Value; }
            set { _account = new InputPropertyInfo { Name = "account", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountNot
        {
            get { return (QueryBuilderParameter<string>)_accountNot.Value; }
            set { _accountNot = new InputPropertyInfo { Name = "account_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountGt
        {
            get { return (QueryBuilderParameter<string>)_accountGt.Value; }
            set { _accountGt = new InputPropertyInfo { Name = "account_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountLt
        {
            get { return (QueryBuilderParameter<string>)_accountLt.Value; }
            set { _accountLt = new InputPropertyInfo { Name = "account_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountGte
        {
            get { return (QueryBuilderParameter<string>)_accountGte.Value; }
            set { _accountGte = new InputPropertyInfo { Name = "account_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountLte
        {
            get { return (QueryBuilderParameter<string>)_accountLte.Value; }
            set { _accountLte = new InputPropertyInfo { Name = "account_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> AccountIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_accountIn.Value; }
            set { _accountIn = new InputPropertyInfo { Name = "account_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> AccountNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_accountNotIn.Value; }
            set { _accountNotIn = new InputPropertyInfo { Name = "account_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountContains
        {
            get { return (QueryBuilderParameter<string>)_accountContains.Value; }
            set { _accountContains = new InputPropertyInfo { Name = "account_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("account_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountNotContains
        {
            get { return (QueryBuilderParameter<string>)_accountNotContains.Value; }
            set { _accountNotContains = new InputPropertyInfo { Name = "account_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumber
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumber.Value; }
            set { _blockNumber = new InputPropertyInfo { Name = "blockNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberNot.Value; }
            set { _blockNumberNot = new InputPropertyInfo { Name = "blockNumber_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGt.Value; }
            set { _blockNumberGt = new InputPropertyInfo { Name = "blockNumber_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLt.Value; }
            set { _blockNumberLt = new InputPropertyInfo { Name = "blockNumber_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberGte.Value; }
            set { _blockNumberGte = new InputPropertyInfo { Name = "blockNumber_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockNumberLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockNumberLte.Value; }
            set { _blockNumberLte = new InputPropertyInfo { Name = "blockNumber_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberIn.Value; }
            set { _blockNumberIn = new InputPropertyInfo { Name = "blockNumber_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockNumber_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockNumberNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockNumberNotIn.Value; }
            set { _blockNumberNotIn = new InputPropertyInfo { Name = "blockNumber_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestamp
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestamp.Value; }
            set { _blockTimestamp = new InputPropertyInfo { Name = "blockTimestamp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampNot
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampNot.Value; }
            set { _blockTimestampNot = new InputPropertyInfo { Name = "blockTimestamp_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGt.Value; }
            set { _blockTimestampGt = new InputPropertyInfo { Name = "blockTimestamp_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLt
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLt.Value; }
            set { _blockTimestampLt = new InputPropertyInfo { Name = "blockTimestamp_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampGte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampGte.Value; }
            set { _blockTimestampGte = new InputPropertyInfo { Name = "blockTimestamp_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<System.Numerics.BigInteger?>))]
        #endif
        public QueryBuilderParameter<System.Numerics.BigInteger?> BlockTimestampLte
        {
            get { return (QueryBuilderParameter<System.Numerics.BigInteger?>)_blockTimestampLte.Value; }
            set { _blockTimestampLte = new InputPropertyInfo { Name = "blockTimestamp_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampIn.Value; }
            set { _blockTimestampIn = new InputPropertyInfo { Name = "blockTimestamp_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("blockTimestamp_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<System.Numerics.BigInteger>>))]
        #endif
        public QueryBuilderParameter<ICollection<System.Numerics.BigInteger>> BlockTimestampNotIn
        {
            get { return (QueryBuilderParameter<ICollection<System.Numerics.BigInteger>>)_blockTimestampNotIn.Value; }
            set { _blockTimestampNotIn = new InputPropertyInfo { Name = "blockTimestamp_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHash
        {
            get { return (QueryBuilderParameter<string>)_transactionHash.Value; }
            set { _transactionHash = new InputPropertyInfo { Name = "transactionHash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNot
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNot.Value; }
            set { _transactionHashNot = new InputPropertyInfo { Name = "transactionHash_not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGt.Value; }
            set { _transactionHashGt = new InputPropertyInfo { Name = "transactionHash_gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lt")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLt
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLt.Value; }
            set { _transactionHashLt = new InputPropertyInfo { Name = "transactionHash_lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_gte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashGte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashGte.Value; }
            set { _transactionHashGte = new InputPropertyInfo { Name = "transactionHash_gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_lte")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashLte
        {
            get { return (QueryBuilderParameter<string>)_transactionHashLte.Value; }
            set { _transactionHashLte = new InputPropertyInfo { Name = "transactionHash_lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashIn.Value; }
            set { _transactionHashIn = new InputPropertyInfo { Name = "transactionHash_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_in")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TransactionHashNotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_transactionHashNotIn.Value; }
            set { _transactionHashNotIn = new InputPropertyInfo { Name = "transactionHash_not_in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashContains.Value; }
            set { _transactionHashContains = new InputPropertyInfo { Name = "transactionHash_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("transactionHash_not_contains")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TransactionHashNotContains
        {
            get { return (QueryBuilderParameter<string>)_transactionHashNotContains.Value; }
            set { _transactionHashNotContains = new InputPropertyInfo { Name = "transactionHash_not_contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_change_block")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BlockChangedFilter>))]
        #endif
        public QueryBuilderParameter<BlockChangedFilter> ChangeBlock
        {
            get { return (QueryBuilderParameter<BlockChangedFilter>)_changeBlock.Value; }
            set { _changeBlock = new InputPropertyInfo { Name = "_change_block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UnpausedFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<UnpausedFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<UnpausedFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UnpausedFilter>>))]
        #endif
        public QueryBuilderParameter<ICollection<UnpausedFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<UnpausedFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_idNot.Name != null) yield return _idNot;
            if (_idGt.Name != null) yield return _idGt;
            if (_idLt.Name != null) yield return _idLt;
            if (_idGte.Name != null) yield return _idGte;
            if (_idLte.Name != null) yield return _idLte;
            if (_idIn.Name != null) yield return _idIn;
            if (_idNotIn.Name != null) yield return _idNotIn;
            if (_idContains.Name != null) yield return _idContains;
            if (_idNotContains.Name != null) yield return _idNotContains;
            if (_account.Name != null) yield return _account;
            if (_accountNot.Name != null) yield return _accountNot;
            if (_accountGt.Name != null) yield return _accountGt;
            if (_accountLt.Name != null) yield return _accountLt;
            if (_accountGte.Name != null) yield return _accountGte;
            if (_accountLte.Name != null) yield return _accountLte;
            if (_accountIn.Name != null) yield return _accountIn;
            if (_accountNotIn.Name != null) yield return _accountNotIn;
            if (_accountContains.Name != null) yield return _accountContains;
            if (_accountNotContains.Name != null) yield return _accountNotContains;
            if (_blockNumber.Name != null) yield return _blockNumber;
            if (_blockNumberNot.Name != null) yield return _blockNumberNot;
            if (_blockNumberGt.Name != null) yield return _blockNumberGt;
            if (_blockNumberLt.Name != null) yield return _blockNumberLt;
            if (_blockNumberGte.Name != null) yield return _blockNumberGte;
            if (_blockNumberLte.Name != null) yield return _blockNumberLte;
            if (_blockNumberIn.Name != null) yield return _blockNumberIn;
            if (_blockNumberNotIn.Name != null) yield return _blockNumberNotIn;
            if (_blockTimestamp.Name != null) yield return _blockTimestamp;
            if (_blockTimestampNot.Name != null) yield return _blockTimestampNot;
            if (_blockTimestampGt.Name != null) yield return _blockTimestampGt;
            if (_blockTimestampLt.Name != null) yield return _blockTimestampLt;
            if (_blockTimestampGte.Name != null) yield return _blockTimestampGte;
            if (_blockTimestampLte.Name != null) yield return _blockTimestampLte;
            if (_blockTimestampIn.Name != null) yield return _blockTimestampIn;
            if (_blockTimestampNotIn.Name != null) yield return _blockTimestampNotIn;
            if (_transactionHash.Name != null) yield return _transactionHash;
            if (_transactionHashNot.Name != null) yield return _transactionHashNot;
            if (_transactionHashGt.Name != null) yield return _transactionHashGt;
            if (_transactionHashLt.Name != null) yield return _transactionHashLt;
            if (_transactionHashGte.Name != null) yield return _transactionHashGte;
            if (_transactionHashLte.Name != null) yield return _transactionHashLte;
            if (_transactionHashIn.Name != null) yield return _transactionHashIn;
            if (_transactionHashNotIn.Name != null) yield return _transactionHashNotIn;
            if (_transactionHashContains.Name != null) yield return _transactionHashContains;
            if (_transactionHashNotContains.Name != null) yield return _transactionHashNotContains;
            if (_changeBlock.Name != null) yield return _changeBlock;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
        }
    }
    #endregion

    #region data classes
    public partial class GovernorUpdated
    {
        public string Id { get; set; }
        public string OldGovernor { get; set; }
        public string NewGovernor { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class MultiTransferredErc20
    {
        public string Id { get; set; }
        public string Token { get; set; }
        public System.Numerics.BigInteger? UserCount { get; set; }
        public System.Numerics.BigInteger? TotalAmount { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class MultiTransferredEth
    {
        public string Id { get; set; }
        public System.Numerics.BigInteger? UserCount { get; set; }
        public System.Numerics.BigInteger? TotalAmount { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class NewFeeAmountData
    {
        public string Id { get; set; }
        public System.Numerics.BigInteger? NewFeeAmount { get; set; }
        public System.Numerics.BigInteger? OldFeeAmount { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class NewFeeTokenData
    {
        public string Id { get; set; }
        public string NewFeeToken { get; set; }
        public string OldFeeToken { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class OwnershipTransferred
    {
        public string Id { get; set; }
        public string PreviousOwner { get; set; }
        public string NewOwner { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class Paused
    {
        public string Id { get; set; }
        public string Account { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class Query
    {
        public GovernorUpdated GovernorUpdated { get; set; }
        public ICollection<GovernorUpdated> GovernorUpdateds { get; set; }
        public MultiTransferredErc20 MultiTransferredErc20 { get; set; }
        public ICollection<MultiTransferredErc20> MultiTransferredErc20S { get; set; }
        public MultiTransferredEth MultiTransferredEth { get; set; }
        public ICollection<MultiTransferredEth> MultiTransferredEtHs { get; set; }
        public NewFeeAmountData NewFeeAmount { get; set; }
        public ICollection<NewFeeAmountData> NewFeeAmounts { get; set; }
        public NewFeeTokenData NewFeeToken { get; set; }
        public ICollection<NewFeeTokenData> NewFeeTokens { get; set; }
        public OwnershipTransferred OwnershipTransferred { get; set; }
        public ICollection<OwnershipTransferred> OwnershipTransferreds { get; set; }
        public Paused Paused { get; set; }
        public ICollection<Paused> Pauseds { get; set; }
        public TransferIn TransferIn { get; set; }
        public ICollection<TransferIn> TransferIns { get; set; }
        public TransferInEth TransferInEth { get; set; }
        public ICollection<TransferInEth> TransferInEtHs { get; set; }
        public TransferOut TransferOut { get; set; }
        public ICollection<TransferOut> TransferOuts { get; set; }
        public Unpaused Unpaused { get; set; }
        public ICollection<Unpaused> Unpauseds { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("_meta")]
        #endif
        public Meta Meta { get; set; }
    }

    public partial class TransferIn
    {
        public string Id { get; set; }
        public System.Numerics.BigInteger? Amount { get; set; }
        public string From { get; set; }
        public string Token { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class TransferInEth
    {
        public string Id { get; set; }
        public System.Numerics.BigInteger? Amount { get; set; }
        public string From { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class TransferOut
    {
        public string Id { get; set; }
        public System.Numerics.BigInteger? Amount { get; set; }
        public string To { get; set; }
        public string Token { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class Unpaused
    {
        public string Id { get; set; }
        public string Account { get; set; }
        public System.Numerics.BigInteger? BlockNumber { get; set; }
        public System.Numerics.BigInteger? BlockTimestamp { get; set; }
        public string TransactionHash { get; set; }
    }

    public partial class Block
    {
        public string Hash { get; set; }
        public int? Number { get; set; }
        public int? Timestamp { get; set; }
        public string ParentHash { get; set; }
    }

    public partial class Meta
    {
        public Block Block { get; set; }
        public string Deployment { get; set; }
        public bool? HasIndexingErrors { get; set; }
    }
    #endregion
}
